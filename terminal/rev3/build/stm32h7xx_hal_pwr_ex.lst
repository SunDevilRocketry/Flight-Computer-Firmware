ARM GAS  /tmp/cccgiV6Y.s 			page 1


   1              		.cpu cortex-m7
   2              		.arch armv7e-m
   3              		.fpu fpv5-d16
   4              		.eabi_attribute 28, 1
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 1
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.file	"stm32h7xx_hal_pwr_ex.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.file 1 "lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c"
  19              		.section	.text.HAL_PWREx_ConfigSupply,"ax",%progbits
  20              		.align	1
  21              		.global	HAL_PWREx_ConfigSupply
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	HAL_PWREx_ConfigSupply:
  27              	.LVL0:
  28              	.LFB144:
   1:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
   2:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   ******************************************************************************
   3:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @file    stm32h7xx_hal_pwr_ex.c
   4:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @author  MCD Application Team
   5:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief   Extended PWR HAL module driver.
   6:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *          This file provides firmware functions to manage the following
   7:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *          functionalities of PWR extension peripheral:
   8:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *           + Peripheral Extended features functions
   9:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   ******************************************************************************
  10:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @attention
  11:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *
  12:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * Copyright (c) 2017 STMicroelectronics.
  13:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * All rights reserved.
  14:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *
  15:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * This software is licensed under terms that can be found in the LICENSE file
  16:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * in the root directory of this software component.
  17:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  18:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *
  19:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   ******************************************************************************
  20:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   @verbatim
  21:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   ==============================================================================
  22:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****                         ##### How to use this driver #####
  23:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   ==============================================================================
  24:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   [..]
  25:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_ConfigSupply() function to configure the regulator supply
  26:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        with the following different setups according to hardware (support SMPS):
  27:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (+) PWR_DIRECT_SMPS_SUPPLY
  28:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (+) PWR_SMPS_1V8_SUPPLIES_LDO
  29:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (+) PWR_SMPS_2V5_SUPPLIES_LDO
  30:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (+) PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO
ARM GAS  /tmp/cccgiV6Y.s 			page 2


  31:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (+) PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO
  32:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (+) PWR_SMPS_1V8_SUPPLIES_EXT
  33:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (+) PWR_SMPS_2V5_SUPPLIES_EXT
  34:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (+) PWR_LDO_SUPPLY
  35:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (+) PWR_EXTERNAL_SOURCE_SUPPLY
  36:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
  37:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_GetSupplyConfig() function to get the current supply setup.
  38:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
  39:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_ControlVoltageScaling() function to configure the main
  40:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        internal regulator output voltage. The voltage scaling could be one of
  41:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        the following scales :
  42:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (+) PWR_REGULATOR_VOLTAGE_SCALE0
  43:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (+) PWR_REGULATOR_VOLTAGE_SCALE1
  44:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (+) PWR_REGULATOR_VOLTAGE_SCALE2
  45:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (+) PWR_REGULATOR_VOLTAGE_SCALE3
  46:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
  47:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_GetVoltageRange() function to get the current output
  48:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        voltage applied to the main regulator.
  49:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
  50:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_ControlStopModeVoltageScaling() function to configure the
  51:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        main internal regulator output voltage in STOP mode. The voltage scaling
  52:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        in STOP mode could be one of the following scales :
  53:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (+) PWR_REGULATOR_SVOS_SCALE3
  54:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (+) PWR_REGULATOR_SVOS_SCALE4
  55:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (+) PWR_REGULATOR_SVOS_SCALE5
  56:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
  57:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_GetStopModeVoltageRange() function to get the current
  58:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        output voltage applied to the main regulator in STOP mode.
  59:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
  60:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_EnterSTOP2Mode() function to enter the system in STOP mode
  61:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        with core domain in D2STOP mode. This API is used only for STM32H7Axxx
  62:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        and STM32H7Bxxx devices.
  63:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        Please ensure to clear all CPU pending events by calling
  64:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        HAL_PWREx_ClearPendingEvent() function when trying to enter the Cortex-Mx
  65:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        in DEEP-SLEEP mode with __WFE() entry.
  66:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
  67:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_EnterSTOPMode() function to enter the selected domain in
  68:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        DSTOP mode. Call this API with all available power domains to enter the
  69:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        system in STOP mode.
  70:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        Please ensure to clear all CPU pending events by calling
  71:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        HAL_PWREx_ClearPendingEvent() function when trying to enter the Cortex-Mx
  72:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        in DEEP-SLEEP mode with __WFE() entry.
  73:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
  74:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_ClearPendingEvent() function always before entring the
  75:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        Cortex-Mx in any low power mode (SLEEP/DEEP-SLEEP) using WFE entry.
  76:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
  77:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_EnterSTANDBYMode() function to enter the selected domain
  78:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        in DSTANDBY mode. Call this API with all available power domains to enter
  79:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        the system in STANDBY mode.
  80:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
  81:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_ConfigD3Domain() function to setup the D3/SRD domain state
  82:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (RUN/STOP) when the system enter to low power mode.
  83:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
  84:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_ClearDomainFlags() function to clear the CPU flags for the
  85:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        selected power domain. This API is used only for dual core devices.
  86:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
  87:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_HoldCore() and HAL_PWREx_ReleaseCore() functions to hold
ARM GAS  /tmp/cccgiV6Y.s 			page 3


  88:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        and release the selected CPU and and their domain peripherals when
  89:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        exiting STOP mode. These APIs are used only for dual core devices.
  90:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
  91:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_EnableFlashPowerDown() and
  92:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        HAL_PWREx_DisableFlashPowerDown() functions to enable and disable the
  93:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        Flash Power Down in STOP mode.
  94:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
  95:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_EnableMemoryShutOff() and
  96:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        HAL_PWREx_DisableMemoryShutOff() functions to enable and disable the
  97:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        memory block shut-off in DStop or DStop2. These APIs are used only for
  98:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        STM32H7Axxx and STM32H7Bxxx lines.
  99:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 100:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_EnableWakeUpPin() and HAL_PWREx_DisableWakeUpPin()
 101:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        functions to enable and disable the Wake-up pin functionality for
 102:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        the selected pin.
 103:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 104:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_GetWakeupFlag() and HAL_PWREx_ClearWakeupFlag()
 105:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        functions to manage wake-up flag for the selected pin.
 106:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 107:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_WAKEUP_PIN_IRQHandler() function to handle all wake-up
 108:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        pins interrupts.
 109:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 110:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_EnableBkUpReg() and HAL_PWREx_DisableBkUpReg() functions
 111:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        to enable and disable the backup domain regulator.
 112:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 113:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_EnableUSBReg(), HAL_PWREx_DisableUSBReg(),
 114:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        HAL_PWREx_EnableUSBVoltageDetector() and
 115:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        HAL_PWREx_DisableUSBVoltageDetector() functions to manage USB power
 116:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        regulation functionalities.
 117:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 118:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_EnableBatteryCharging() and
 119:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        HAL_PWREx_DisableBatteryCharging() functions to enable and disable the
 120:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        battery charging feature with the selected resistor.
 121:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 122:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_EnableAnalogBooster() and
 123:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        HAL_PWREx_DisableAnalogBooster() functions to enable and disable the
 124:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        AVD boost feature when the VDD supply voltage is below 2V7.
 125:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 126:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_EnableMonitoring() and HAL_PWREx_DisableMonitoring()
 127:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        functions to enable and disable the VBAT and Temperature monitoring.
 128:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        When VBAT and Temperature monitoring feature is enables, use
 129:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        HAL_PWREx_GetTemperatureLevel() and HAL_PWREx_GetVBATLevel() to get
 130:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        respectively the Temperature level and VBAT level.
 131:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 132:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_GetMMCVoltage() and HAL_PWREx_DisableMonitoring()
 133:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        function to get VDDMMC voltage level. This API is used only for
 134:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        STM32H7Axxx and STM32H7Bxxx lines
 135:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 136:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_ConfigAVD() after setting parameter to be configured
 137:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (event mode and voltage threshold) in order to set up the Analog Voltage
 138:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        Detector then use HAL_PWREx_EnableAVD() and  HAL_PWREx_DisableAVD()
 139:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        functions to start and stop the AVD detection.
 140:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (+) AVD level could be one of the following values :
 141:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****              (++) 1V7
 142:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****              (++) 2V1
 143:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****              (++) 2V5
 144:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****              (++) 2V8
ARM GAS  /tmp/cccgiV6Y.s 			page 4


 145:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 146:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) Call HAL_PWREx_PVD_AVD_IRQHandler() function to handle the PWR PVD and
 147:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        AVD interrupt request.
 148:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 149:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   @endverbatim
 150:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 151:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 152:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /* Includes ------------------------------------------------------------------*/
 153:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #include "stm32h7xx_hal.h"
 154:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 155:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /** @addtogroup STM32H7xx_HAL_Driver
 156:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @{
 157:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 158:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 159:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /** @defgroup PWREx PWREx
 160:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief PWR Extended HAL module driver
 161:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @{
 162:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 163:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 164:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #ifdef HAL_PWR_MODULE_ENABLED
 165:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 166:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /* Private typedef -----------------------------------------------------------*/
 167:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /* Private define ------------------------------------------------------------*/
 168:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 169:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /** @addtogroup PWREx_Private_Constants
 170:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @{
 171:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 172:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 173:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /** @defgroup PWREx_AVD_Mode_Mask PWR Extended AVD Mode Mask
 174:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @{
 175:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 176:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #define AVD_MODE_IT              (0x00010000U)
 177:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #define AVD_MODE_EVT             (0x00020000U)
 178:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #define AVD_RISING_EDGE          (0x00000001U)
 179:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #define AVD_FALLING_EDGE         (0x00000002U)
 180:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #define AVD_RISING_FALLING_EDGE  (0x00000003U)
 181:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
 182:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @}
 183:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 184:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 185:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /** @defgroup PWREx_REG_SET_TIMEOUT PWR Extended Flag Setting Time Out Value
 186:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @{
 187:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 188:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #define PWR_FLAG_SETTING_DELAY   (1000U)
 189:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
 190:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @}
 191:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 192:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 193:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /** @defgroup PWREx_WakeUp_Pins_Offsets PWREx Wake-Up Pins masks and offsets
 194:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @{
 195:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 196:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /* Wake-Up Pins EXTI register mask */
 197:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (EXTI_IMR2_IM57)
 198:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #define PWR_EXTI_WAKEUP_PINS_MASK  (EXTI_IMR2_IM55 | EXTI_IMR2_IM56 |\
 199:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****                                     EXTI_IMR2_IM57 | EXTI_IMR2_IM58 |\
 200:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****                                     EXTI_IMR2_IM59 | EXTI_IMR2_IM60)
 201:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #else
ARM GAS  /tmp/cccgiV6Y.s 			page 5


 202:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #define PWR_EXTI_WAKEUP_PINS_MASK  (EXTI_IMR2_IM55 | EXTI_IMR2_IM56 |\
 203:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****                                     EXTI_IMR2_IM58 | EXTI_IMR2_IM60)
 204:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (EXTI_IMR2_IM57) */
 205:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 206:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /* Wake-Up Pins PWR Pin Pull shift offsets */
 207:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #define PWR_WAKEUP_PINS_PULL_SHIFT_OFFSET (2U)
 208:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
 209:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @}
 210:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 211:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 212:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
 213:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @}
 214:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 215:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 216:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /* Private macro -------------------------------------------------------------*/
 217:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /* Private variables ---------------------------------------------------------*/
 218:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /* Private function prototypes -----------------------------------------------*/
 219:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /* Private functions ---------------------------------------------------------*/
 220:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /* Exported types ------------------------------------------------------------*/
 221:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /* Exported functions --------------------------------------------------------*/
 222:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 223:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /** @defgroup PWREx_Exported_Functions PWREx Exported Functions
 224:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @{
 225:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 226:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 227:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /** @defgroup PWREx_Exported_Functions_Group1 Power Supply Control Functions
 228:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief    Power supply control functions
 229:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *
 230:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** @verbatim
 231:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****  ===============================================================================
 232:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****                   ##### Power supply control functions #####
 233:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****  ===============================================================================
 234:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     [..]
 235:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    (#) When the system is powered on, the POR monitors VDD supply. Once VDD is
 236:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        above the POR threshold level, the voltage regulator is enabled in the
 237:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        default supply configuration:
 238:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) The Voltage converter output level is set at 1V0 in accordance with
 239:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           the VOS3 level configured in PWR (D3/SRD) domain control register
 240:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           (PWR_D3CR/PWR_SRDCR).
 241:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) The system is kept in reset mode as long as VCORE is not ok.
 242:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) Once VCORE is ok, the system is taken out of reset and the HSI
 243:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           oscillator is enabled.
 244:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) Once the oscillator is stable, the system is initialized: Flash memory
 245:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           and option bytes are loaded and the CPU starts in Run* mode.
 246:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) The software shall then initialize the system including supply
 247:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           configuration programming using the HAL_PWREx_ConfigSupply().
 248:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) Once the supply configuration has been configured, the
 249:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           HAL_PWREx_ConfigSupply() function checks the ACTVOSRDY bit in PWR
 250:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           control status register 1 (PWR_CSR1) to guarantee a valid voltage
 251:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           levels:
 252:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (++) As long as ACTVOSRDY indicates that voltage levels are invalid, the
 253:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****             system is in limited Run* mode, write accesses to the RAMs are not
 254:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****             permitted and VOS shall not be changed.
 255:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (++) Once ACTVOSRDY indicates that voltage levels are valid, the system
 256:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****             is in normal Run mode, write accesses to RAMs are allowed and VOS
 257:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****             can be changed.
 258:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
ARM GAS  /tmp/cccgiV6Y.s 			page 6


 259:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** @endverbatim
 260:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @{
 261:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 262:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 263:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
 264:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Configure the system Power Supply.
 265:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  SupplySource : Specifies the Power Supply source to set after a
 266:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                        system startup.
 267:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         This parameter can be one of the following values :
 268:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_DIRECT_SMPS_SUPPLY : The SMPS supplies the Vcore Power
 269:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                          Domains. The LDO is Bypassed.
 270:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_SMPS_1V8_SUPPLIES_LDO : The SMPS 1.8V output supplies
 271:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                             the LDO. The Vcore Power Domains
 272:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                             are supplied from the LDO.
 273:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_SMPS_2V5_SUPPLIES_LDO : The SMPS 2.5V output supplies
 274:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                             the LDO. The Vcore Power Domains
 275:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                             are supplied from the LDO.
 276:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO : The SMPS 1.8V output
 277:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                                     supplies external
 278:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                                     circuits and the LDO.
 279:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                                     The Vcore Power Domains
 280:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                                     are supplied from the
 281:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                                     LDO.
 282:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO : The SMPS 2.5V output
 283:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                                     supplies external
 284:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                                     circuits and the LDO.
 285:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                                     The Vcore Power Domains
 286:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                                     are supplied from the
 287:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                                     LDO.
 288:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_SMPS_1V8_SUPPLIES_EXT : The SMPS 1.8V output supplies
 289:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                             external circuits. The LDO is
 290:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                             Bypassed. The Vcore Power
 291:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                             Domains are supplied from
 292:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                             external source.
 293:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_SMPS_2V5_SUPPLIES_EXT : The SMPS 2.5V output supplies
 294:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                             external circuits. The LDO is
 295:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                             Bypassed. The Vcore Power
 296:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                             Domains are supplied from
 297:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                             external source.
 298:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_LDO_SUPPLY : The LDO regulator supplies the Vcore Power
 299:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                  Domains. The SMPS regulator is Bypassed.
 300:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_EXTERNAL_SOURCE_SUPPLY : The SMPS and the LDO are
 301:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                              Bypassed. The Vcore Power
 302:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                              Domains are supplied from
 303:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                              external source.
 304:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   The PWR_LDO_SUPPLY and PWR_EXTERNAL_SOURCE_SUPPLY are used by all
 305:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         H7 lines.
 306:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         The PWR_DIRECT_SMPS_SUPPLY, PWR_SMPS_1V8_SUPPLIES_LDO,
 307:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         PWR_SMPS_2V5_SUPPLIES_LDO, PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO,
 308:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO, PWR_SMPS_1V8_SUPPLIES_EXT and
 309:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
 310:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         regulator.
 311:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval HAL status.
 312:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 313:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
 314:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
  29              		.loc 1 314 1 view -0
ARM GAS  /tmp/cccgiV6Y.s 			page 7


  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
 315:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   uint32_t tickstart;
  33              		.loc 1 315 3 view .LVU1
 316:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 317:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the parameters */
 318:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_SUPPLY (SupplySource));
  34              		.loc 1 318 3 view .LVU2
 319:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 320:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check if supply source was configured */
 321:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (PWR_FLAG_SCUEN)
 322:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
  35              		.loc 1 322 3 view .LVU3
  36              		.loc 1 322 7 is_stmt 0 view .LVU4
  37 0000 134B     		ldr	r3, .L12
  38 0002 DB68     		ldr	r3, [r3, #12]
  39              		.loc 1 322 6 view .LVU5
  40 0004 13F0040F 		tst	r3, #4
  41 0008 07D1     		bne	.L2
 323:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #else
 324:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_L
 325:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (PWR_FLAG_SCUEN) */
 326:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 327:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Check supply configuration */
 328:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
  42              		.loc 1 328 5 is_stmt 1 view .LVU6
  43              		.loc 1 328 13 is_stmt 0 view .LVU7
  44 000a 114B     		ldr	r3, .L12
  45 000c DB68     		ldr	r3, [r3, #12]
  46              		.loc 1 328 19 view .LVU8
  47 000e 03F00703 		and	r3, r3, #7
  48              		.loc 1 328 8 view .LVU9
  49 0012 8342     		cmp	r3, r0
  50 0014 1AD0     		beq	.L6
 329:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 330:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       /* Supply configuration update locked, can't apply a new supply config */
 331:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       return HAL_ERROR;
  51              		.loc 1 331 14 view .LVU10
  52 0016 0120     		movs	r0, #1
  53              	.LVL1:
  54              		.loc 1 331 14 view .LVU11
  55 0018 7047     		bx	lr
  56              	.LVL2:
  57              	.L2:
 314:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   uint32_t tickstart;
  58              		.loc 1 314 1 view .LVU12
  59 001a 10B5     		push	{r4, lr}
  60              	.LCFI0:
  61              		.cfi_def_cfa_offset 8
  62              		.cfi_offset 4, -8
  63              		.cfi_offset 14, -4
 332:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 333:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     else
 334:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 335:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       /* Supply configuration update locked, but new supply configuration
 336:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****          matches with old supply configuration : nothing to do
ARM GAS  /tmp/cccgiV6Y.s 			page 8


 337:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       */
 338:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       return HAL_OK;
 339:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 340:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 341:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 342:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Set the power supply configuration */
 343:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
  64              		.loc 1 343 3 is_stmt 1 view .LVU13
  65 001c 0C4A     		ldr	r2, .L12
  66 001e D368     		ldr	r3, [r2, #12]
  67 0020 23F00703 		bic	r3, r3, #7
  68 0024 0343     		orrs	r3, r3, r0
  69 0026 D360     		str	r3, [r2, #12]
 344:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 345:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Get tick */
 346:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   tickstart = HAL_GetTick ();
  70              		.loc 1 346 3 view .LVU14
  71              		.loc 1 346 15 is_stmt 0 view .LVU15
  72 0028 FFF7FEFF 		bl	HAL_GetTick
  73              	.LVL3:
  74              		.loc 1 346 15 view .LVU16
  75 002c 0446     		mov	r4, r0
  76              	.LVL4:
 347:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 348:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Wait till voltage level flag is set */
 349:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
  77              		.loc 1 349 3 is_stmt 1 view .LVU17
  78              	.L4:
  79              		.loc 1 349 50 view .LVU18
  80              		.loc 1 349 10 is_stmt 0 view .LVU19
  81 002e 084B     		ldr	r3, .L12
  82 0030 5B68     		ldr	r3, [r3, #4]
  83              		.loc 1 349 50 view .LVU20
  84 0032 13F4005F 		tst	r3, #8192
  85 0036 07D1     		bne	.L11
 350:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 351:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
  86              		.loc 1 351 5 is_stmt 1 view .LVU21
  87              		.loc 1 351 10 is_stmt 0 view .LVU22
  88 0038 FFF7FEFF 		bl	HAL_GetTick
  89              	.LVL5:
  90              		.loc 1 351 25 view .LVU23
  91 003c 001B     		subs	r0, r0, r4
  92              		.loc 1 351 8 view .LVU24
  93 003e B0F57A7F 		cmp	r0, #1000
  94 0042 F4D9     		bls	.L4
 352:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 353:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       return HAL_ERROR;
  95              		.loc 1 353 14 view .LVU25
  96 0044 0120     		movs	r0, #1
  97 0046 00E0     		b	.L3
  98              	.L11:
 354:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 355:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 356:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 357:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (SMPS)
 358:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
ARM GAS  /tmp/cccgiV6Y.s 			page 9


 359:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 360:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 361:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 362:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
 363:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 364:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Get the current tick number */
 365:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     tickstart = HAL_GetTick ();
 366:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 367:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Wait till SMPS external supply ready flag is set */
 368:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 369:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 370:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 371:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       {
 372:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         return HAL_ERROR;
 373:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       }
 374:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 375:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 376:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (SMPS) */
 377:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 378:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   return HAL_OK;
  99              		.loc 1 378 10 view .LVU26
 100 0048 0020     		movs	r0, #0
 101              	.L3:
 379:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 102              		.loc 1 379 1 view .LVU27
 103 004a 10BD     		pop	{r4, pc}
 104              	.LVL6:
 105              	.L6:
 106              	.LCFI1:
 107              		.cfi_def_cfa_offset 0
 108              		.cfi_restore 4
 109              		.cfi_restore 14
 338:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 110              		.loc 1 338 14 view .LVU28
 111 004c 0020     		movs	r0, #0
 112              	.LVL7:
 113              		.loc 1 379 1 view .LVU29
 114 004e 7047     		bx	lr
 115              	.L13:
 116              		.align	2
 117              	.L12:
 118 0050 00480258 		.word	1476544512
 119              		.cfi_endproc
 120              	.LFE144:
 122              		.section	.text.HAL_PWREx_GetSupplyConfig,"ax",%progbits
 123              		.align	1
 124              		.global	HAL_PWREx_GetSupplyConfig
 125              		.syntax unified
 126              		.thumb
 127              		.thumb_func
 129              	HAL_PWREx_GetSupplyConfig:
 130              	.LFB145:
 380:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 381:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
 382:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Get the power supply configuration.
 383:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval The supply configuration.
 384:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
ARM GAS  /tmp/cccgiV6Y.s 			page 10


 385:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** uint32_t HAL_PWREx_GetSupplyConfig (void)
 386:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 131              		.loc 1 386 1 is_stmt 1 view -0
 132              		.cfi_startproc
 133              		@ args = 0, pretend = 0, frame = 0
 134              		@ frame_needed = 0, uses_anonymous_args = 0
 135              		@ link register save eliminated.
 387:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   return (PWR->CR3 & PWR_SUPPLY_CONFIG_MASK);
 136              		.loc 1 387 3 view .LVU31
 137              		.loc 1 387 14 is_stmt 0 view .LVU32
 138 0000 024B     		ldr	r3, .L15
 139 0002 D868     		ldr	r0, [r3, #12]
 388:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 140              		.loc 1 388 1 view .LVU33
 141 0004 00F00700 		and	r0, r0, #7
 142 0008 7047     		bx	lr
 143              	.L16:
 144 000a 00BF     		.align	2
 145              	.L15:
 146 000c 00480258 		.word	1476544512
 147              		.cfi_endproc
 148              	.LFE145:
 150              		.section	.text.HAL_PWREx_ControlVoltageScaling,"ax",%progbits
 151              		.align	1
 152              		.global	HAL_PWREx_ControlVoltageScaling
 153              		.syntax unified
 154              		.thumb
 155              		.thumb_func
 157              	HAL_PWREx_ControlVoltageScaling:
 158              	.LVL8:
 159              	.LFB146:
 389:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 390:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
 391:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Configure the main internal regulator output voltage.
 392:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  VoltageScaling : Specifies the regulator output voltage to achieve
 393:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                          a tradeoff between performance and power
 394:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                          consumption.
 395:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *          This parameter can be one of the following values :
 396:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_REGULATOR_VOLTAGE_SCALE0 : Regulator voltage output
 397:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                                Scale 0 mode.
 398:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_REGULATOR_VOLTAGE_SCALE1 : Regulator voltage output
 399:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                                range 1 mode.
 400:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_REGULATOR_VOLTAGE_SCALE2 : Regulator voltage output
 401:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                                range 2 mode.
 402:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_REGULATOR_VOLTAGE_SCALE3 : Regulator voltage output
 403:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                                range 3 mode.
 404:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   For STM32H74x and STM32H75x lines, configuring Voltage Scale 0 is
 405:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         only possible when Vcore is supplied from LDO (Low DropOut). The
 406:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         SYSCFG Clock must be enabled through __HAL_RCC_SYSCFG_CLK_ENABLE()
 407:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         macro before configuring Voltage Scale 0.
 408:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         To enter low power mode , and if current regulator voltage is
 409:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         Voltage Scale 0 then first switch to Voltage Scale 1 before entering
 410:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         low power mode.
 411:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval HAL Status
 412:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 413:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling (uint32_t VoltageScaling)
 414:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
ARM GAS  /tmp/cccgiV6Y.s 			page 11


 160              		.loc 1 414 1 is_stmt 1 view -0
 161              		.cfi_startproc
 162              		@ args = 0, pretend = 0, frame = 0
 163              		@ frame_needed = 0, uses_anonymous_args = 0
 164              		.loc 1 414 1 is_stmt 0 view .LVU35
 165 0000 38B5     		push	{r3, r4, r5, lr}
 166              	.LCFI2:
 167              		.cfi_def_cfa_offset 16
 168              		.cfi_offset 3, -16
 169              		.cfi_offset 4, -12
 170              		.cfi_offset 5, -8
 171              		.cfi_offset 14, -4
 415:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   uint32_t tickstart;
 172              		.loc 1 415 3 is_stmt 1 view .LVU36
 416:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 417:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the parameters */
 418:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_REGULATOR_VOLTAGE (VoltageScaling));
 173              		.loc 1 418 3 view .LVU37
 419:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 420:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Get the voltage scaling  */
 421:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if ((PWR->CSR1 & PWR_CSR1_ACTVOS) == VoltageScaling)
 174              		.loc 1 421 3 view .LVU38
 175              		.loc 1 421 11 is_stmt 0 view .LVU39
 176 0002 324B     		ldr	r3, .L38
 177 0004 5B68     		ldr	r3, [r3, #4]
 178              		.loc 1 421 18 view .LVU40
 179 0006 03F44043 		and	r3, r3, #49152
 180              		.loc 1 421 6 view .LVU41
 181 000a 8342     		cmp	r3, r0
 182 000c 5CD0     		beq	.L28
 183 000e 0446     		mov	r4, r0
 422:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 423:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Old and new voltage scaling configuration match : nothing to do */
 424:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     return HAL_OK;
 425:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 426:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 427:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (PWR_SRDCR_VOS)
 428:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Set the voltage range */
 429:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   MODIFY_REG (PWR->SRDCR, PWR_SRDCR_VOS, VoltageScaling);
 430:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #else
 431:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined(SYSCFG_PWRCR_ODEN) /* STM32H74xxx and STM32H75xxx lines */
 432:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE0)
 184              		.loc 1 432 3 is_stmt 1 view .LVU42
 185              		.loc 1 432 6 is_stmt 0 view .LVU43
 186 0010 08BB     		cbnz	r0, .L19
 433:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 434:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     if ((PWR->CR3 & PWR_CR3_LDOEN) == PWR_CR3_LDOEN)
 187              		.loc 1 434 5 is_stmt 1 view .LVU44
 188              		.loc 1 434 13 is_stmt 0 view .LVU45
 189 0012 2E4B     		ldr	r3, .L38
 190 0014 DB68     		ldr	r3, [r3, #12]
 191              		.loc 1 434 8 view .LVU46
 192 0016 13F0020F 		tst	r3, #2
 193 001a 01D1     		bne	.L34
 435:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 436:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       /* Set the voltage range */
 437:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       MODIFY_REG (PWR->D3CR, PWR_D3CR_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
ARM GAS  /tmp/cccgiV6Y.s 			page 12


 438:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 439:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       /* Get tick */
 440:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       tickstart = HAL_GetTick ();
 441:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 442:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       /* Wait till voltage level flag is set */
 443:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 444:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       {
 445:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 446:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         {
 447:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           return HAL_ERROR;
 448:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         }
 449:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       }
 450:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 451:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       /* Enable the PWR overdrive */
 452:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       SET_BIT (SYSCFG->PWRCR, SYSCFG_PWRCR_ODEN);
 453:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 454:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     else
 455:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 456:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       /* The voltage scale 0 is only possible when LDO regulator is enabled */
 457:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       return HAL_ERROR;
 194              		.loc 1 457 14 view .LVU47
 195 001c 0120     		movs	r0, #1
 196              	.LVL9:
 197              		.loc 1 457 14 view .LVU48
 198 001e 52E0     		b	.L18
 199              	.LVL10:
 200              	.L34:
 437:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 201              		.loc 1 437 7 is_stmt 1 view .LVU49
 202 0020 2A4A     		ldr	r2, .L38
 203 0022 9369     		ldr	r3, [r2, #24]
 204 0024 43F44043 		orr	r3, r3, #49152
 205 0028 9361     		str	r3, [r2, #24]
 440:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 206              		.loc 1 440 7 view .LVU50
 440:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 207              		.loc 1 440 19 is_stmt 0 view .LVU51
 208 002a FFF7FEFF 		bl	HAL_GetTick
 209              	.LVL11:
 440:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 210              		.loc 1 440 19 view .LVU52
 211 002e 0446     		mov	r4, r0
 212              	.LVL12:
 443:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       {
 213              		.loc 1 443 7 is_stmt 1 view .LVU53
 214              	.L20:
 443:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       {
 215              		.loc 1 443 54 view .LVU54
 443:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       {
 216              		.loc 1 443 14 is_stmt 0 view .LVU55
 217 0030 264B     		ldr	r3, .L38
 218 0032 5B68     		ldr	r3, [r3, #4]
 443:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       {
 219              		.loc 1 443 54 view .LVU56
 220 0034 13F4005F 		tst	r3, #8192
 221 0038 07D1     		bne	.L35
 445:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         {
ARM GAS  /tmp/cccgiV6Y.s 			page 13


 222              		.loc 1 445 9 is_stmt 1 view .LVU57
 445:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         {
 223              		.loc 1 445 14 is_stmt 0 view .LVU58
 224 003a FFF7FEFF 		bl	HAL_GetTick
 225              	.LVL13:
 445:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         {
 226              		.loc 1 445 29 view .LVU59
 227 003e 001B     		subs	r0, r0, r4
 445:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         {
 228              		.loc 1 445 12 view .LVU60
 229 0040 B0F57A7F 		cmp	r0, #1000
 230 0044 F4D9     		bls	.L20
 447:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         }
 231              		.loc 1 447 18 view .LVU61
 232 0046 0120     		movs	r0, #1
 233 0048 3DE0     		b	.L18
 234              	.L35:
 452:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 235              		.loc 1 452 7 is_stmt 1 view .LVU62
 236 004a 214A     		ldr	r2, .L38+4
 237 004c D36A     		ldr	r3, [r2, #44]
 238 004e 43F00103 		orr	r3, r3, #1
 239 0052 D362     		str	r3, [r2, #44]
 240 0054 0CE0     		b	.L22
 241              	.LVL14:
 242              	.L19:
 458:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 459:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 460:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   else
 461:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 462:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     if ((PWR->CSR1 & PWR_CSR1_ACTVOS) == PWR_REGULATOR_VOLTAGE_SCALE1)
 243              		.loc 1 462 5 view .LVU63
 244              		.loc 1 462 13 is_stmt 0 view .LVU64
 245 0056 1D4B     		ldr	r3, .L38
 246 0058 5B68     		ldr	r3, [r3, #4]
 247              		.loc 1 462 20 view .LVU65
 248 005a 03F44043 		and	r3, r3, #49152
 249              		.loc 1 462 8 view .LVU66
 250 005e B3F5404F 		cmp	r3, #49152
 251 0062 15D0     		beq	.L36
 252              	.LVL15:
 253              	.L23:
 463:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 464:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       if ((SYSCFG->PWRCR & SYSCFG_PWRCR_ODEN) != 0U)
 465:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       {
 466:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         /* Disable the PWR overdrive */
 467:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         CLEAR_BIT(SYSCFG->PWRCR, SYSCFG_PWRCR_ODEN);
 468:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 469:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         /* Get tick */
 470:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         tickstart = HAL_GetTick ();
 471:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 472:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         /* Wait till voltage level flag is set */
 473:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 474:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         {
 475:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 476:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           {
 477:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****             return HAL_ERROR;
ARM GAS  /tmp/cccgiV6Y.s 			page 14


 478:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           }
 479:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         }
 480:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       }
 481:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 482:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 483:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Set the voltage range */
 484:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     MODIFY_REG (PWR->D3CR, PWR_D3CR_VOS, VoltageScaling);
 254              		.loc 1 484 5 is_stmt 1 view .LVU67
 255 0064 194A     		ldr	r2, .L38
 256 0066 9369     		ldr	r3, [r2, #24]
 257 0068 23F44043 		bic	r3, r3, #49152
 258 006c 2343     		orrs	r3, r3, r4
 259 006e 9361     		str	r3, [r2, #24]
 260              	.LVL16:
 261              	.L22:
 485:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 486:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #else  /* STM32H72xxx and STM32H73xxx lines */
 487:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Set the voltage range */
 488:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   MODIFY_REG(PWR->D3CR, PWR_D3CR_VOS, VoltageScaling);
 489:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (SYSCFG_PWRCR_ODEN) */
 490:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (PWR_SRDCR_VOS) */
 491:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 492:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Get tick */
 493:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   tickstart = HAL_GetTick ();
 262              		.loc 1 493 3 view .LVU68
 263              		.loc 1 493 15 is_stmt 0 view .LVU69
 264 0070 FFF7FEFF 		bl	HAL_GetTick
 265              	.LVL17:
 266 0074 0446     		mov	r4, r0
 267              	.LVL18:
 494:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 495:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Wait till voltage level flag is set */
 496:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 268              		.loc 1 496 3 is_stmt 1 view .LVU70
 269              	.L26:
 270              		.loc 1 496 50 view .LVU71
 271              		.loc 1 496 10 is_stmt 0 view .LVU72
 272 0076 154B     		ldr	r3, .L38
 273 0078 5B68     		ldr	r3, [r3, #4]
 274              		.loc 1 496 50 view .LVU73
 275 007a 13F4005F 		tst	r3, #8192
 276 007e 21D1     		bne	.L37
 497:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 498:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     if ((HAL_GetTick() - tickstart) > PWR_FLAG_SETTING_DELAY)
 277              		.loc 1 498 5 is_stmt 1 view .LVU74
 278              		.loc 1 498 10 is_stmt 0 view .LVU75
 279 0080 FFF7FEFF 		bl	HAL_GetTick
 280              	.LVL19:
 281              		.loc 1 498 24 view .LVU76
 282 0084 001B     		subs	r0, r0, r4
 283              		.loc 1 498 8 view .LVU77
 284 0086 B0F57A7F 		cmp	r0, #1000
 285 008a F4D9     		bls	.L26
 499:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 500:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       return HAL_ERROR;
 286              		.loc 1 500 14 view .LVU78
 287 008c 0120     		movs	r0, #1
ARM GAS  /tmp/cccgiV6Y.s 			page 15


 288 008e 1AE0     		b	.L18
 289              	.LVL20:
 290              	.L36:
 464:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       {
 291              		.loc 1 464 7 is_stmt 1 view .LVU79
 464:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       {
 292              		.loc 1 464 18 is_stmt 0 view .LVU80
 293 0090 0F4B     		ldr	r3, .L38+4
 294 0092 DB6A     		ldr	r3, [r3, #44]
 464:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       {
 295              		.loc 1 464 10 view .LVU81
 296 0094 13F0010F 		tst	r3, #1
 297 0098 E4D0     		beq	.L23
 467:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 298              		.loc 1 467 9 is_stmt 1 view .LVU82
 299 009a 0D4A     		ldr	r2, .L38+4
 300 009c D36A     		ldr	r3, [r2, #44]
 301 009e 23F00103 		bic	r3, r3, #1
 302 00a2 D362     		str	r3, [r2, #44]
 470:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 303              		.loc 1 470 9 view .LVU83
 470:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 304              		.loc 1 470 21 is_stmt 0 view .LVU84
 305 00a4 FFF7FEFF 		bl	HAL_GetTick
 306              	.LVL21:
 470:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 307              		.loc 1 470 21 view .LVU85
 308 00a8 0546     		mov	r5, r0
 309              	.LVL22:
 473:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         {
 310              		.loc 1 473 9 is_stmt 1 view .LVU86
 311              	.L24:
 473:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         {
 312              		.loc 1 473 56 view .LVU87
 473:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         {
 313              		.loc 1 473 16 is_stmt 0 view .LVU88
 314 00aa 084B     		ldr	r3, .L38
 315 00ac 5B68     		ldr	r3, [r3, #4]
 473:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         {
 316              		.loc 1 473 56 view .LVU89
 317 00ae 13F4005F 		tst	r3, #8192
 318 00b2 D7D1     		bne	.L23
 475:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           {
 319              		.loc 1 475 11 is_stmt 1 view .LVU90
 475:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           {
 320              		.loc 1 475 16 is_stmt 0 view .LVU91
 321 00b4 FFF7FEFF 		bl	HAL_GetTick
 322              	.LVL23:
 475:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           {
 323              		.loc 1 475 31 view .LVU92
 324 00b8 401B     		subs	r0, r0, r5
 475:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           {
 325              		.loc 1 475 14 view .LVU93
 326 00ba B0F57A7F 		cmp	r0, #1000
 327 00be F4D9     		bls	.L24
 477:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           }
 328              		.loc 1 477 20 view .LVU94
ARM GAS  /tmp/cccgiV6Y.s 			page 16


 329 00c0 0120     		movs	r0, #1
 330 00c2 00E0     		b	.L18
 331              	.LVL24:
 332              	.L37:
 501:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 502:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 503:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 504:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   return HAL_OK;
 333              		.loc 1 504 10 view .LVU95
 334 00c4 0020     		movs	r0, #0
 335              	.LVL25:
 336              	.L18:
 505:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 337              		.loc 1 505 1 view .LVU96
 338 00c6 38BD     		pop	{r3, r4, r5, pc}
 339              	.LVL26:
 340              	.L28:
 424:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 341              		.loc 1 424 12 view .LVU97
 342 00c8 0020     		movs	r0, #0
 343              	.LVL27:
 424:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 344              		.loc 1 424 12 view .LVU98
 345 00ca FCE7     		b	.L18
 346              	.L39:
 347              		.align	2
 348              	.L38:
 349 00cc 00480258 		.word	1476544512
 350 00d0 00040058 		.word	1476396032
 351              		.cfi_endproc
 352              	.LFE146:
 354              		.section	.text.HAL_PWREx_GetVoltageRange,"ax",%progbits
 355              		.align	1
 356              		.global	HAL_PWREx_GetVoltageRange
 357              		.syntax unified
 358              		.thumb
 359              		.thumb_func
 361              	HAL_PWREx_GetVoltageRange:
 362              	.LFB147:
 506:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 507:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
 508:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Get the main internal regulator output voltage. Reflecting the last
 509:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *        VOS value applied to the PMU.
 510:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval The current applied VOS selection.
 511:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 512:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** uint32_t HAL_PWREx_GetVoltageRange (void)
 513:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 363              		.loc 1 513 1 is_stmt 1 view -0
 364              		.cfi_startproc
 365              		@ args = 0, pretend = 0, frame = 0
 366              		@ frame_needed = 0, uses_anonymous_args = 0
 367              		@ link register save eliminated.
 514:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Get the active voltage scaling */
 515:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   return (PWR->CSR1 & PWR_CSR1_ACTVOS);
 368              		.loc 1 515 3 view .LVU100
 369              		.loc 1 515 14 is_stmt 0 view .LVU101
 370 0000 024B     		ldr	r3, .L41
ARM GAS  /tmp/cccgiV6Y.s 			page 17


 371 0002 5868     		ldr	r0, [r3, #4]
 516:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 372              		.loc 1 516 1 view .LVU102
 373 0004 00F44040 		and	r0, r0, #49152
 374 0008 7047     		bx	lr
 375              	.L42:
 376 000a 00BF     		.align	2
 377              	.L41:
 378 000c 00480258 		.word	1476544512
 379              		.cfi_endproc
 380              	.LFE147:
 382              		.section	.text.HAL_PWREx_ControlStopModeVoltageScaling,"ax",%progbits
 383              		.align	1
 384              		.global	HAL_PWREx_ControlStopModeVoltageScaling
 385              		.syntax unified
 386              		.thumb
 387              		.thumb_func
 389              	HAL_PWREx_ControlStopModeVoltageScaling:
 390              	.LVL28:
 391              	.LFB148:
 517:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 518:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
 519:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Configure the main internal regulator output voltage in STOP mode.
 520:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  VoltageScaling : Specifies the regulator output voltage when the
 521:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         system enters Stop mode to achieve a tradeoff between performance
 522:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         and power consumption.
 523:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *          This parameter can be one of the following values:
 524:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_REGULATOR_SVOS_SCALE3 : Regulator voltage output range
 525:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                             3 mode.
 526:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_REGULATOR_SVOS_SCALE4 : Regulator voltage output range
 527:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                             4 mode.
 528:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_REGULATOR_SVOS_SCALE5 : Regulator voltage output range
 529:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                             5 mode.
 530:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   The Stop mode voltage scaling for SVOS4 and SVOS5 sets the voltage
 531:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         regulator in Low-power (LP) mode to further reduce power consumption.
 532:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         When preselecting SVOS3, the use of the voltage regulator low-power
 533:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         mode (LP) can be selected by LPDS register bit.
 534:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   The selected SVOS4 and SVOS5 levels add an additional startup delay
 535:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         when exiting from system Stop mode.
 536:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval HAL Status.
 537:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 538:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** HAL_StatusTypeDef HAL_PWREx_ControlStopModeVoltageScaling (uint32_t VoltageScaling)
 539:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 392              		.loc 1 539 1 is_stmt 1 view -0
 393              		.cfi_startproc
 394              		@ args = 0, pretend = 0, frame = 0
 395              		@ frame_needed = 0, uses_anonymous_args = 0
 396              		@ link register save eliminated.
 540:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the parameters */
 541:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_STOP_MODE_REGULATOR_VOLTAGE (VoltageScaling));
 397              		.loc 1 541 3 view .LVU104
 542:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 543:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Return the stop mode voltage range */
 544:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   MODIFY_REG (PWR->CR1, PWR_CR1_SVOS, VoltageScaling);
 398              		.loc 1 544 3 view .LVU105
 399 0000 034A     		ldr	r2, .L44
 400 0002 1368     		ldr	r3, [r2]
ARM GAS  /tmp/cccgiV6Y.s 			page 18


 401 0004 23F44043 		bic	r3, r3, #49152
 402 0008 0343     		orrs	r3, r3, r0
 403 000a 1360     		str	r3, [r2]
 545:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 546:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   return HAL_OK;
 404              		.loc 1 546 3 view .LVU106
 547:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 405              		.loc 1 547 1 is_stmt 0 view .LVU107
 406 000c 0020     		movs	r0, #0
 407              	.LVL29:
 408              		.loc 1 547 1 view .LVU108
 409 000e 7047     		bx	lr
 410              	.L45:
 411              		.align	2
 412              	.L44:
 413 0010 00480258 		.word	1476544512
 414              		.cfi_endproc
 415              	.LFE148:
 417              		.section	.text.HAL_PWREx_GetStopModeVoltageRange,"ax",%progbits
 418              		.align	1
 419              		.global	HAL_PWREx_GetStopModeVoltageRange
 420              		.syntax unified
 421              		.thumb
 422              		.thumb_func
 424              	HAL_PWREx_GetStopModeVoltageRange:
 425              	.LFB149:
 548:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 549:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
 550:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Get the main internal regulator output voltage in STOP mode.
 551:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval The actual applied VOS selection.
 552:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 553:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** uint32_t HAL_PWREx_GetStopModeVoltageRange (void)
 554:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 426              		.loc 1 554 1 is_stmt 1 view -0
 427              		.cfi_startproc
 428              		@ args = 0, pretend = 0, frame = 0
 429              		@ frame_needed = 0, uses_anonymous_args = 0
 430              		@ link register save eliminated.
 555:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Return the stop voltage scaling */
 556:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   return (PWR->CR1 & PWR_CR1_SVOS);
 431              		.loc 1 556 3 view .LVU110
 432              		.loc 1 556 14 is_stmt 0 view .LVU111
 433 0000 024B     		ldr	r3, .L47
 434 0002 1868     		ldr	r0, [r3]
 557:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 435              		.loc 1 557 1 view .LVU112
 436 0004 00F44040 		and	r0, r0, #49152
 437 0008 7047     		bx	lr
 438              	.L48:
 439 000a 00BF     		.align	2
 440              	.L47:
 441 000c 00480258 		.word	1476544512
 442              		.cfi_endproc
 443              	.LFE149:
 445              		.section	.text.HAL_PWREx_EnterSTOPMode,"ax",%progbits
 446              		.align	1
 447              		.global	HAL_PWREx_EnterSTOPMode
ARM GAS  /tmp/cccgiV6Y.s 			page 19


 448              		.syntax unified
 449              		.thumb
 450              		.thumb_func
 452              	HAL_PWREx_EnterSTOPMode:
 453              	.LVL30:
 454              	.LFB150:
 558:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
 559:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @}
 560:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 561:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 562:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /** @defgroup PWREx_Exported_Functions_Group2 Low Power Control Functions
 563:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief    Low power control functions
 564:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *
 565:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** @verbatim
 566:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****  ===============================================================================
 567:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****                      ##### Low power control functions #####
 568:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****  ===============================================================================
 569:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 570:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     *** Domains Low Power modes configuration ***
 571:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     =============================================
 572:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     [..]
 573:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       This section provides the extended low power mode control APIs.
 574:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       The system presents 3 principles domains (D1, D2 and D3) that can be
 575:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       operated in low-power modes (DSTOP or DSTANDBY mode):
 576:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 577:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) DSTOP mode to enters a domain to STOP mode:
 578:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (++) D1 domain and/or D2 domain enters DSTOP mode only when the CPU
 579:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****             subsystem is in CSTOP mode and has allocated peripheral in the
 580:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****             domain.
 581:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****             In DSTOP mode the domain bus matrix clock is stopped.
 582:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (++) The system enters STOP mode using one of the following scenarios:
 583:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         (+++) D1 domain enters DSTANDBY mode (powered off) and D2, D3 domains
 584:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****               enter DSTOP mode.
 585:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         (+++) D2 domain enters DSTANDBY mode (powered off) and D1, D3 domains
 586:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****               enter DSTOP mode.
 587:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         (+++) D3 domain enters DSTANDBY mode (powered off) and D1, D2 domains
 588:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****               enter DSTOP mode.
 589:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         (+++) D1 and D2 domains enter DSTANDBY mode (powered off) and D3 domain
 590:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****               enters DSTOP mode.
 591:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         (+++) D1 and D3 domains enter DSTANDBY mode (powered off) and D2 domain
 592:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****               enters DSTOP mode.
 593:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         (+++) D2 and D3 domains enter DSTANDBY mode (powered off) and D1 domain
 594:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****               enters DSTOP mode.
 595:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         (+++) D1, D2 and D3 domains enter DSTOP mode.
 596:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (++) When the system enters STOP mode, the clocks are stopped and the
 597:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****             regulator is running in main or low power mode.
 598:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (++) D3 domain can be kept in Run mode regardless of the CPU status when
 599:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****             enter STOP mode by using HAL_PWREx_ConfigD3Domain(D3State) function.
 600:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 601:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) DSTANDBY mode to enters a domain to STANDBY mode:
 602:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (++) The DSTANDBY mode is entered when the PDDS_Dn bit in PWR CPU control
 603:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****             register (PWR_CPUCR) for the Dn domain selects Standby mode.
 604:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (++) The system enters STANDBY mode only when D1, D2 and D3 domains enter
 605:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****             DSTANDBY mode. Consequently the VCORE supply regulator is powered
 606:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****             off.
 607:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 608:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    *** DSTOP mode ***
ARM GAS  /tmp/cccgiV6Y.s 			page 20


 609:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    ==================
 610:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     [..]
 611:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       In DStop mode the domain bus matrix clock is stopped.
 612:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       The Flash memory can enter low-power Stop mode when it is enabled through
 613:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       FLPS in PWR_CR1 register. This allows a trade-off between domain DStop
 614:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       restart time and low power consumption.
 615:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     [..]
 616:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       In DStop mode domain peripherals using the LSI or LSE clock and
 617:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       peripherals having a kernel clock request are still able to operate.
 618:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     [..]
 619:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       Before entering DSTOP mode it is recommended to call SCB_CleanDCache
 620:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       function in order to clean the D-Cache and guarantee the data integrity
 621:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       for the SRAM memories.
 622:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 623:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) Entry:
 624:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****          The DSTOP mode is entered using the HAL_PWREx_EnterSTOPMode(Regulator,
 625:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****          STOPEntry, Domain) function with:
 626:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****          (++) Regulator:
 627:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           (+++) PWR_MAINREGULATOR_ON     : Main regulator ON.
 628:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           (+++) PWR_LOWPOWERREGULATOR_ON : Low Power regulator ON.
 629:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****          (++) STOPEntry:
 630:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           (+++) PWR_STOPENTRY_WFI : enter STOP mode with WFI instruction
 631:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           (+++) PWR_STOPENTRY_WFE : enter STOP mode with WFE instruction
 632:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****          (++) Domain:
 633:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           (+++) PWR_D1_DOMAIN : Enters D1/CD domain to DSTOP mode.
 634:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           (+++) PWR_D2_DOMAIN : Enters D2 domain to DSTOP mode.
 635:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           (+++) PWR_D3_DOMAIN : Enters D3/SRD domain to DSTOP mode.
 636:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 637:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) Exit:
 638:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         Any EXTI Line (Internal or External) configured in Interrupt/Event mode.
 639:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 640:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    *** DSTANDBY mode ***
 641:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    =====================
 642:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     [..]
 643:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       In DStandby mode:
 644:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         (+) The domain bus matrix clock is stopped.
 645:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         (+) The domain is powered down and the domain RAM and register contents
 646:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****             are lost.
 647:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     [..]
 648:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       Before entering DSTANDBY mode it is recommended to call SCB_CleanDCache
 649:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       function in order to clean the D-Cache and guarantee the data integrity
 650:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       for the SRAM memories.
 651:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 652:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) Entry:
 653:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****          The DSTANDBY mode is entered using the HAL_PWREx_EnterSTANDBYMode
 654:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****          (Domain) function with:
 655:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (++) Domain:
 656:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         (+++) PWR_D1_DOMAIN : Enters D1/CD domain to DSTANDBY mode.
 657:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         (+++) PWR_D2_DOMAIN : Enters D2 domain to DSTANDBY mode.
 658:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         (+++) PWR_D3_DOMAIN : Enters D3/SRD domain to DSTANDBY mode.
 659:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 660:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) Exit:
 661:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         WKUP pin rising or falling edge, RTC alarm (Alarm A and Alarm B), RTC
 662:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         wakeup, tamper event, time stamp event, external reset in NRST pin,
 663:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         IWDG reset.
 664:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 665:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    *** Keep D3/SRD in RUN mode ***
ARM GAS  /tmp/cccgiV6Y.s 			page 21


 666:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****    ===============================
 667:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     [..]
 668:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       D3/SRD domain can be kept in Run mode regardless of the CPU status when
 669:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       entering STOP mode by using HAL_PWREx_ConfigD3Domain(D3State) function
 670:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       with :
 671:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (+) D3State:
 672:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         (++) PWR_D3_DOMAIN_STOP : D3/SDR domain follows the CPU sub-system
 673:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****                                   mode.
 674:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         (++) PWR_D3_DOMAIN_RUN : D3/SRD domain remains in Run mode regardless
 675:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****                                  of CPU subsystem mode.
 676:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 677:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     *** FLASH Power Down configuration ****
 678:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     =======================================
 679:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     [..]
 680:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       By setting the FLPS bit in the PWR_CR1 register using the
 681:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       HAL_PWREx_EnableFlashPowerDown() function, the Flash memory also enters
 682:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       power down mode when the device enters STOP mode. When the Flash memory is
 683:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       in power down mode, an additional startup delay is incurred when waking up
 684:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       from STOP mode.
 685:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 686:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     *** Wakeup Pins configuration ****
 687:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     ===================================
 688:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     [..]
 689:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       Wakeup pins allow the system to exit from Standby mode. The configuration
 690:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       of wakeup pins is done with the HAL_PWREx_EnableWakeUpPin(sPinParams)
 691:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       function with:
 692:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (+) sPinParams: structure to enable and configure a wakeup pin:
 693:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         (++) WakeUpPin: Wakeup pin to be enabled.
 694:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         (++) PinPolarity: Wakeup pin polarity (rising or falling edge).
 695:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         (++) PinPull: Wakeup pin pull (no pull, pull-up or pull-down).
 696:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     [..]
 697:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       The wakeup pins are internally connected to the EXTI lines [55-60] to
 698:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       generate an interrupt if enabled. The EXTI lines configuration is done by
 699:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       the HAL_EXTI_Dx_EventInputConfig() functions defined in the stm32h7xxhal.c
 700:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       file.
 701:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     [..]
 702:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       When a wakeup pin event is received the HAL_PWREx_WAKEUP_PIN_IRQHandler is
 703:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       called and the appropriate flag is set in the PWR_WKUPFR register. Then in
 704:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       the HAL_PWREx_WAKEUP_PIN_IRQHandler function the wakeup pin flag will be
 705:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       cleared and the appropriate user callback will be called. The user can add
 706:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       his own code by customization of function pointer HAL_PWREx_WKUPx_Callback.
 707:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 708:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** @endverbatim
 709:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @{
 710:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 711:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 712:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (PWR_CPUCR_RETDS_CD)
 713:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
 714:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Enter the system to STOP mode with main domain in DSTOP2.
 715:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   In STOP mode, the domain bus matrix clock is stalled.
 716:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   In STOP mode, memories and registers are maintained and peripherals
 717:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         in CPU domain are no longer operational.
 718:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   All clocks in the VCORE domain are stopped, the PLL, the HSI and the
 719:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         HSE oscillators are disabled. Only Peripherals that have wakeup
 720:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         capability can switch on the HSI to receive a frame, and switch off
 721:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         the HSI after receiving the frame if it is not a wakeup frame. In
 722:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         this case the HSI clock is propagated only to the peripheral
ARM GAS  /tmp/cccgiV6Y.s 			page 22


 723:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         requesting it.
 724:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   When exiting STOP mode by issuing an interrupt or a wakeup event,
 725:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         the HSI RC oscillator is selected as system clock if STOPWUCK bit in
 726:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         RCC_CFGR register is set.
 727:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  Regulator : Specifies the regulator state in STOP mode.
 728:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *          This parameter can be one of the following values:
 729:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_MAINREGULATOR_ON     : STOP mode with regulator ON.
 730:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_LOWPOWERREGULATOR_ON : STOP mode with low power
 731:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                            regulator ON.
 732:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  STOPEntry : Specifies if STOP mode in entered with WFI or WFE
 733:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                     intrinsic instruction.
 734:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *          This parameter can be one of the following values:
 735:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_STOPENTRY_WFI : Enter STOP mode with WFI instruction.
 736:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_STOPENTRY_WFE : Enter STOP mode with WFE instruction.
 737:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
 738:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 739:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_EnterSTOP2Mode (uint32_t Regulator, uint8_t STOPEntry)
 740:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 741:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the parameters */
 742:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_REGULATOR (Regulator));
 743:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
 744:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 745:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Select the regulator state in Stop mode */
 746:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 747:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 748:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Go to DStop2 mode (deep retention) when CPU domain enters Deepsleep */
 749:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   SET_BIT (PWR->CPUCR, PWR_CPUCR_RETDS_CD);
 750:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 751:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Keep DSTOP mode when SmartRun domain enters Deepsleep */
 752:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_SRD);
 753:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 754:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Set SLEEPDEEP bit of Cortex System Control Register */
 755:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 756:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 757:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Ensure that all instructions are done before entering STOP mode */
 758:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   __ISB ();
 759:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   __DSB ();
 760:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 761:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Select Stop mode entry */
 762:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if (STOPEntry == PWR_STOPENTRY_WFI)
 763:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 764:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Request Wait For Interrupt */
 765:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     __WFI ();
 766:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 767:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   else
 768:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 769:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Request Wait For Event */
 770:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     __WFE ();
 771:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 772:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 773:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
 774:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 775:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 776:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (PWR_CPUCR_RETDS_CD) */
 777:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 778:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
 779:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Enter a Domain to DSTOP mode.
ARM GAS  /tmp/cccgiV6Y.s 			page 23


 780:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   This API gives flexibility to manage independently each domain STOP
 781:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         mode. For dual core lines, this API should be executed with the
 782:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         corresponding Cortex-Mx to enter domain to DSTOP mode. When it is
 783:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         executed by all available Cortex-Mx, the system enter to STOP mode.
 784:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         For single core lines, calling this API with domain parameter set to
 785:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         PWR_D1_DOMAIN (D1/CD), the whole system will enter in STOP mode
 786:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         independently of PWR_CPUCR_PDDS_Dx bits values if RUN_D3 bit in the
 787:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         CPUCR_RUN_D3 is cleared.
 788:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   In DStop mode the domain bus matrix clock is stopped.
 789:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   The system D3/SRD domain enter Stop mode only when the CPU subsystem
 790:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         is in CStop mode, the EXTI wakeup sources are inactive and at least
 791:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         one PDDS_Dn bit in PWR CPU control register (PWR_CPUCR) for
 792:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         any domain request Stop.
 793:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   Before entering DSTOP mode it is recommended to call SCB_CleanDCache
 794:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         function in order to clean the D-Cache and guarantee the data
 795:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         integrity for the SRAM memories.
 796:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   In System Stop mode, the domain peripherals that use the LSI or LSE
 797:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         clock, and the peripherals that have a kernel clock request to
 798:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         select HSI or CSI as source, are still able to operate.
 799:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  Regulator : Specifies the regulator state in STOP mode.
 800:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *          This parameter can be one of the following values:
 801:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_MAINREGULATOR_ON     : STOP mode with regulator ON.
 802:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_LOWPOWERREGULATOR_ON : STOP mode with low power
 803:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                            regulator ON.
 804:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  STOPEntry : Specifies if STOP mode in entered with WFI or WFE
 805:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                     intrinsic instruction.
 806:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *          This parameter can be one of the following values:
 807:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_STOPENTRY_WFI : Enter STOP mode with WFI instruction.
 808:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_STOPENTRY_WFE : Enter STOP mode with WFE instruction.
 809:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  Domain : Specifies the Domain to enter in DSTOP mode.
 810:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *          This parameter can be one of the following values:
 811:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_D1_DOMAIN : Enter D1/CD Domain to DSTOP mode.
 812:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
 813:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
 814:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
 815:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 816:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
 817:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 455              		.loc 1 817 1 is_stmt 1 view -0
 456              		.cfi_startproc
 457              		@ args = 0, pretend = 0, frame = 0
 458              		@ frame_needed = 0, uses_anonymous_args = 0
 459              		@ link register save eliminated.
 460              		.loc 1 817 1 is_stmt 0 view .LVU114
 461 0000 10B4     		push	{r4}
 462              	.LCFI3:
 463              		.cfi_def_cfa_offset 4
 464              		.cfi_offset 4, -4
 818:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the parameters */
 819:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_REGULATOR (Regulator));
 465              		.loc 1 819 3 is_stmt 1 view .LVU115
 820:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
 466              		.loc 1 820 3 view .LVU116
 821:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_DOMAIN (Domain));
 467              		.loc 1 821 3 view .LVU117
 822:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 823:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Select the regulator state in Stop mode */
ARM GAS  /tmp/cccgiV6Y.s 			page 24


 824:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 468              		.loc 1 824 3 view .LVU118
 469 0002 174C     		ldr	r4, .L58
 470 0004 2368     		ldr	r3, [r4]
 471 0006 23F00103 		bic	r3, r3, #1
 472 000a 0343     		orrs	r3, r3, r0
 473 000c 2360     		str	r3, [r4]
 825:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 826:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Select the domain Power Down DeepSleep */
 827:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if (Domain == PWR_D1_DOMAIN)
 474              		.loc 1 827 3 view .LVU119
 475              		.loc 1 827 6 is_stmt 0 view .LVU120
 476 000e CAB9     		cbnz	r2, .L50
 828:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 829:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (DUAL_CORE)
 830:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Check current core */
 831:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     if (HAL_GetCurrentCPUID () != CM7_CPUID)
 832:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 833:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       /*
 834:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****          When the domain selected and the cortex-mx don't match, entering stop
 835:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****          mode will not be performed
 836:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       */
 837:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       return;
 838:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 839:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (DUAL_CORE) */
 840:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 841:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
 842:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 477              		.loc 1 842 5 is_stmt 1 view .LVU121
 478 0010 2369     		ldr	r3, [r4, #16]
 479 0012 23F00103 		bic	r3, r3, #1
 480 0016 2361     		str	r3, [r4, #16]
 843:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 844:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Set SLEEPDEEP bit of Cortex System Control Register */
 845:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 481              		.loc 1 845 5 view .LVU122
 482 0018 124A     		ldr	r2, .L58+4
 483              	.LVL31:
 484              		.loc 1 845 5 is_stmt 0 view .LVU123
 485 001a 1369     		ldr	r3, [r2, #16]
 486 001c 43F00403 		orr	r3, r3, #4
 487 0020 1361     		str	r3, [r2, #16]
 846:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 847:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Ensure that all instructions are done before entering STOP mode */
 848:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     __DSB ();
 488              		.loc 1 848 5 is_stmt 1 view .LVU124
 489              	.LBB22:
 490              	.LBI22:
 491              		.file 2 "lib/Drivers/CMSIS/Include/cmsis_gcc.h"
   1:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.2.0
   5:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     08. May 2019
   6:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2019 Arm Limited. All rights reserved.
ARM GAS  /tmp/cccgiV6Y.s 			page 25


   9:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
ARM GAS  /tmp/cccgiV6Y.s 			page 26


  66:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
ARM GAS  /tmp/cccgiV6Y.s 			page 27


 123:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   
 130:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   
 135:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   
 141:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   
 146:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****  
 157:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****  
 163:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   
 166:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/cccgiV6Y.s 			page 28


 180:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute((used, section(".vectors")))
 183:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 186:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 187:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 188:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 189:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 190:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 191:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 192:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 193:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 194:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 195:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 196:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 197:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 198:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 199:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 200:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 201:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 202:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 203:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 204:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 205:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 206:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 207:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 208:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 209:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 210:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 211:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 212:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 213:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 214:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
 215:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 216:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
 217:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 218:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 219:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 220:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 221:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 222:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 223:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 224:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 225:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 226:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 227:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 228:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 229:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 230:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 231:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               non-secure Control Register value
 232:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 233:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 234:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 235:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 236:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/cccgiV6Y.s 			page 29


 237:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 238:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 239:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 240:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 241:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 243:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 244:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
 245:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 246:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 247:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 248:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 249:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 250:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 251:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 252:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 253:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 254:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 255:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 256:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 257:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 258:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 259:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 260:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 261:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 262:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 263:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 264:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 265:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 266:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 267:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 268:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 269:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 270:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 271:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 272:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 273:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 274:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 275:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 276:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 277:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 278:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 279:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 280:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 281:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 282:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 283:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 284:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 285:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 286:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 287:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 288:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 289:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 290:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 291:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 292:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 293:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/cccgiV6Y.s 			page 30


 294:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 295:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 296:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 297:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 298:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               xPSR Register value
 299:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 300:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 301:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 302:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 303:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 305:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 306:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 307:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 308:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 310:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 311:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 312:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 313:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 314:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 315:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 316:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 317:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 318:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 319:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 320:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 321:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 322:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 323:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 324:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 325:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 326:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 327:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 328:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 329:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 330:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 331:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 332:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 333:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 334:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 335:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 336:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 337:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 338:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 339:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 340:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 341:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 342:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 343:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 344:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 345:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 346:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 347:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 348:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 350:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
ARM GAS  /tmp/cccgiV6Y.s 			page 31


 351:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 352:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 353:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 354:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 355:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 356:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 357:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 358:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 359:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 360:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 361:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 362:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 363:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 364:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 365:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 366:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 367:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 368:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 369:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 370:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 371:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 372:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 373:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 374:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 375:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 376:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 378:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 379:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 380:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 381:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 382:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 383:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 384:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 385:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 386:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 387:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 388:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 389:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 390:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 391:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 392:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 393:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 394:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 395:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 396:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 397:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 398:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 399:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 400:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 401:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 402:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 403:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 404:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 405:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 406:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 407:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
ARM GAS  /tmp/cccgiV6Y.s 			page 32


 408:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 409:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 410:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 411:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 412:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 413:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 414:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 415:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 416:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 417:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 418:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 419:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 420:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 421:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               SP Register value
 422:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 423:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 424:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 425:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 426:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 427:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 428:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 429:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 430:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 431:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 432:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 433:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 434:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 435:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 436:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 437:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 438:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 439:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 440:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 441:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 442:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 443:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 444:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 445:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 446:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 447:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 448:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 449:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 450:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 451:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 452:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 453:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 454:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 455:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 456:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 457:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 458:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 459:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 460:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 461:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 462:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 463:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 464:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
ARM GAS  /tmp/cccgiV6Y.s 			page 33


 465:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 466:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 467:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 468:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) :: "memory");
 469:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 470:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 471:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 472:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 473:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 474:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 475:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 476:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 477:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 478:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 479:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 480:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 481:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 482:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 484:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 486:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 487:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 488:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 489:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 490:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 491:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 492:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 493:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 494:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 495:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 496:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 498:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 499:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 500:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 501:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 502:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 503:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 504:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 505:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 506:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_fault_irq(void)
 507:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 508:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 509:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 510:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 511:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 512:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 513:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 514:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 515:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 516:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 517:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_fault_irq(void)
 518:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 519:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 520:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 521:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/cccgiV6Y.s 			page 34


 522:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 523:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 524:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 525:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 526:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 527:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 528:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
 529:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 530:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 531:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 532:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 533:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 534:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 535:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 537:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 538:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 539:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 540:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 541:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 542:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 543:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_BASEPRI_NS(void)
 544:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 545:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 546:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 547:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 548:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 549:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 550:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 551:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 552:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 553:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 554:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 555:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 556:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 557:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 558:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
 559:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 560:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 561:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 562:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 563:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 564:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 565:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 566:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority (non-secure)
 567:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Base Priority register when in secure state.
 568:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 569:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 570:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)
 571:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 572:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_ns, %0" : : "r" (basePri) : "memory");
 573:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 574:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 575:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 576:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 577:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 578:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
ARM GAS  /tmp/cccgiV6Y.s 			page 35


 579:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 580:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 581:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 582:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 583:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI_MAX(uint32_t basePri)
 584:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 585:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 586:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 587:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 588:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 589:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 590:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 591:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 592:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 593:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 594:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FAULTMASK(void)
 595:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 596:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 597:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 598:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 599:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 600:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 601:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 602:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 603:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 604:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 605:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask (non-secure)
 606:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Fault Mask register when in secure state.
 607:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 608:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 609:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_FAULTMASK_NS(void)
 610:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 611:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 612:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 613:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask_ns" : "=r" (result) );
 614:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 615:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 616:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 617:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 618:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 619:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 620:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 621:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 622:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 623:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 624:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
 625:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 626:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 627:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 628:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 629:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 630:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 631:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 632:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask (non-secure)
 633:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Fault Mask register when in secure state.
 634:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 635:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/cccgiV6Y.s 			page 36


 636:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_FAULTMASK_NS(uint32_t faultMask)
 637:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 638:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask_ns, %0" : : "r" (faultMask) : "memory");
 639:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 640:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 641:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 642:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 643:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 644:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 645:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 646:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 647:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 648:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 649:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 650:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 651:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit
 652:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 653:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 654:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 655:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   
 656:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer Limit (PSPLIM).
 657:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 658:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 659:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSPLIM(void)
 660:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 661:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 662:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 663:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****     // without main extensions, the non-secure PSPLIM is RAZ/WI
 664:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 665:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 666:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 667:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim"  : "=r" (result) );
 668:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 669:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 670:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 671:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 672:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3))
 673:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 674:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit (non-secure)
 675:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 676:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 677:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 678:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer Limit (PSPLIM) when in
 679:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 680:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 681:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSPLIM_NS(void)
 682:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 683:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 684:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 685:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 686:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 687:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 688:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim_ns"  : "=r" (result) );
 689:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 690:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 691:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 692:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/cccgiV6Y.s 			page 37


 693:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 694:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 695:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 696:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer Limit
 697:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 698:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 699:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 700:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   
 701:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer Limit (PSPLIM).
 702:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 703:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 704:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSPLIM(uint32_t ProcStackPtrLimit)
 705:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 706:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 707:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 708:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 709:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 710:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 711:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 712:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 713:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 714:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 715:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 716:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 717:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 718:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 719:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 720:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 721:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 722:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer Limit (PSPLIM) when in s
 723:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 724:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 725:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSPLIM_NS(uint32_t ProcStackPtrLimit)
 726:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 727:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 728:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 729:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 730:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 731:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim_ns, %0\n" : : "r" (ProcStackPtrLimit));
 732:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 733:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 734:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 735:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 736:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 737:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 738:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit
 739:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 740:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 741:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 742:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 743:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer Limit (MSPLIM).
 744:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 745:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 746:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSPLIM(void)
 747:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 748:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 749:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
ARM GAS  /tmp/cccgiV6Y.s 			page 38


 750:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 751:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 752:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 753:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 754:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim" : "=r" (result) );
 755:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 756:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 757:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 758:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 759:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 760:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 761:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 762:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit (non-secure)
 763:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 764:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 765:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 766:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer Limit(MSPLIM) when in sec
 767:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 768:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 769:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSPLIM_NS(void)
 770:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 771:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 772:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 773:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 774:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 775:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 776:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim_ns" : "=r" (result) );
 777:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 778:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 779:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 780:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 781:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 782:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 783:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 784:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit
 785:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 786:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 787:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 788:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 789:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer Limit (MSPLIM).
 790:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer Limit value to set
 791:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSPLIM(uint32_t MainStackPtrLimit)
 793:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 795:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 796:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 797:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 798:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 799:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 800:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 801:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 802:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 803:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 804:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 805:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 806:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit (non-secure)
ARM GAS  /tmp/cccgiV6Y.s 			page 39


 807:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 808:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 809:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 810:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer Limit (MSPLIM) when in secu
 811:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer value to set
 812:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 813:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSPLIM_NS(uint32_t MainStackPtrLimit)
 814:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 815:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 816:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 817:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 818:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 819:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim_ns, %0" : : "r" (MainStackPtrLimit));
 820:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 821:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 822:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 823:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 824:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 825:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 826:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 827:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 828:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 829:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 830:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 831:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 832:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 833:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FPSCR(void)
 834:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 835:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 836:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 837:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_get_fpscr) 
 838:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 839:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 840:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 841:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_arm_get_fpscr();
 842:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 843:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 844:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 845:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 846:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 847:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 848:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 849:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   return(0U);
 850:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 851:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 852:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 853:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 854:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 855:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 856:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 857:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 858:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 859:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FPSCR(uint32_t fpscr)
 860:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 861:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 862:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 863:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_set_fpscr)
ARM GAS  /tmp/cccgiV6Y.s 			page 40


 864:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 865:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 866:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 867:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   __builtin_arm_set_fpscr(fpscr);
 868:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 869:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 870:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 871:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 872:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)fpscr;
 873:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 874:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 875:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 876:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 877:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 878:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 879:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 880:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 881:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 882:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 883:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 884:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** */
 885:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 886:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 887:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 888:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 889:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 890:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 891:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 892:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 893:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 894:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 895:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 896:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 897:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 898:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 899:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 900:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 901:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 902:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 903:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 904:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 905:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 906:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 907:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 908:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 909:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi")
 910:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 911:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 912:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 913:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 914:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 915:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 916:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 917:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe")
 918:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 919:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 920:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/cccgiV6Y.s 			page 41


 921:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 922:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 923:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 924:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 925:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 926:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 927:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 928:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 929:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 930:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 931:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 932:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 933:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 934:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 935:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 936:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 937:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 938:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 939:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 940:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 941:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 942:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 943:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 944:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 492              		.loc 2 944 27 view .LVU125
 493              	.LBB23:
 945:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 946:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 494              		.loc 2 946 3 view .LVU126
 495              		.syntax unified
 496              	@ 946 "lib/Drivers/CMSIS/Include/cmsis_gcc.h" 1
 497 0022 BFF34F8F 		dsb 0xF
 498              	@ 0 "" 2
 499              		.thumb
 500              		.syntax unified
 501              	.LBE23:
 502              	.LBE22:
 849:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     __ISB ();
 503              		.loc 1 849 5 view .LVU127
 504              	.LBB24:
 505              	.LBI24:
 933:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 506              		.loc 2 933 27 view .LVU128
 507              	.LBB25:
 935:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 508              		.loc 2 935 3 view .LVU129
 509              		.syntax unified
 510              	@ 935 "lib/Drivers/CMSIS/Include/cmsis_gcc.h" 1
 511 0026 BFF36F8F 		isb 0xF
 512              	@ 0 "" 2
 513              		.thumb
 514              		.syntax unified
 515              	.LBE25:
 516              	.LBE24:
 850:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 851:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Select Stop mode entry */
 852:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     if (STOPEntry == PWR_STOPENTRY_WFI)
ARM GAS  /tmp/cccgiV6Y.s 			page 42


 517              		.loc 1 852 5 view .LVU130
 518              		.loc 1 852 8 is_stmt 0 view .LVU131
 519 002a 0129     		cmp	r1, #1
 520 002c 08D0     		beq	.L56
 853:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 854:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       /* Request Wait For Interrupt */
 855:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       __WFI ();
 856:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 857:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     else
 858:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 859:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       /* Request Wait For Event */
 860:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       __WFE ();
 521              		.loc 1 860 7 is_stmt 1 view .LVU132
 522              		.syntax unified
 523              	@ 860 "lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c" 1
 524 002e 20BF     		wfe
 525              	@ 0 "" 2
 526              		.thumb
 527              		.syntax unified
 528              	.L52:
 861:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 862:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 863:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
 864:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 529              		.loc 1 864 5 view .LVU133
 530 0030 0C4A     		ldr	r2, .L58+4
 531 0032 1369     		ldr	r3, [r2, #16]
 532 0034 23F00403 		bic	r3, r3, #4
 533 0038 1361     		str	r3, [r2, #16]
 534              	.L49:
 865:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 866:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (PWR_CPUCR_PDDS_D2)
 867:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   else if (Domain == PWR_D2_DOMAIN)
 868:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 869:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (DUAL_CORE)
 870:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Check current core */
 871:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     if (HAL_GetCurrentCPUID () != CM4_CPUID)
 872:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 873:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       /*
 874:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****          When the domain selected and the cortex-mx don't match, entering stop
 875:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****          mode will not be performed
 876:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       */
 877:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       return;
 878:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 879:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 880:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Keep DSTOP mode when D2 domain enters Deepsleep */
 881:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 882:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 883:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Set SLEEPDEEP bit of Cortex System Control Register */
 884:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 885:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 886:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Ensure that all instructions are done before entering STOP mode */
 887:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     __DSB ();
 888:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     __ISB ();
 889:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 890:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Select Stop mode entry */
 891:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     if (STOPEntry == PWR_STOPENTRY_WFI)
ARM GAS  /tmp/cccgiV6Y.s 			page 43


 892:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 893:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       /* Request Wait For Interrupt */
 894:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       __WFI ();
 895:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 896:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     else
 897:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 898:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       /* Request Wait For Event */
 899:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       __WFE ();
 900:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 901:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 902:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
 903:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 904:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #else
 905:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Keep DSTOP mode when D2 domain enters Deepsleep */
 906:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
 907:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif  /* defined (DUAL_CORE) */
 908:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 909:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (PWR_CPUCR_PDDS_D2) */
 910:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   else
 911:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 912:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (DUAL_CORE)
 913:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Check current core */
 914:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     if (HAL_GetCurrentCPUID () == CM7_CPUID)
 915:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 916:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       /* Keep DSTOP mode when D3 domain enters Deepsleep */
 917:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 918:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 919:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     else
 920:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 921:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       /* Keep DSTOP mode when D3 domain enters Deepsleep */
 922:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 923:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 924:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #else
 925:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
 926:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 927:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif  /* defined (DUAL_CORE) */
 928:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 929:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 535              		.loc 1 929 1 is_stmt 0 view .LVU134
 536 003a 5DF8044B 		ldr	r4, [sp], #4
 537              	.LCFI4:
 538              		.cfi_remember_state
 539              		.cfi_restore 4
 540              		.cfi_def_cfa_offset 0
 541 003e 7047     		bx	lr
 542              	.L56:
 543              	.LCFI5:
 544              		.cfi_restore_state
 855:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
 545              		.loc 1 855 7 is_stmt 1 view .LVU135
 546              		.syntax unified
 547              	@ 855 "lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c" 1
 548 0040 30BF     		wfi
 549              	@ 0 "" 2
 550              		.thumb
 551              		.syntax unified
 552 0042 F5E7     		b	.L52
ARM GAS  /tmp/cccgiV6Y.s 			page 44


 553              	.LVL32:
 554              	.L50:
 867:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 555              		.loc 1 867 8 view .LVU136
 867:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 556              		.loc 1 867 11 is_stmt 0 view .LVU137
 557 0044 012A     		cmp	r2, #1
 558 0046 05D0     		beq	.L57
 926:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif  /* defined (DUAL_CORE) */
 559              		.loc 1 926 5 is_stmt 1 view .LVU138
 560 0048 054A     		ldr	r2, .L58
 561              	.LVL33:
 926:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif  /* defined (DUAL_CORE) */
 562              		.loc 1 926 5 is_stmt 0 view .LVU139
 563 004a 1369     		ldr	r3, [r2, #16]
 564 004c 23F00403 		bic	r3, r3, #4
 565 0050 1361     		str	r3, [r2, #16]
 566              		.loc 1 929 1 view .LVU140
 567 0052 F2E7     		b	.L49
 568              	.LVL34:
 569              	.L57:
 906:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif  /* defined (DUAL_CORE) */
 570              		.loc 1 906 5 is_stmt 1 view .LVU141
 571 0054 024A     		ldr	r2, .L58
 572              	.LVL35:
 906:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif  /* defined (DUAL_CORE) */
 573              		.loc 1 906 5 is_stmt 0 view .LVU142
 574 0056 1369     		ldr	r3, [r2, #16]
 575 0058 23F00203 		bic	r3, r3, #2
 576 005c 1361     		str	r3, [r2, #16]
 577 005e ECE7     		b	.L49
 578              	.L59:
 579              		.align	2
 580              	.L58:
 581 0060 00480258 		.word	1476544512
 582 0064 00ED00E0 		.word	-536810240
 583              		.cfi_endproc
 584              	.LFE150:
 586              		.section	.text.HAL_PWREx_ClearPendingEvent,"ax",%progbits
 587              		.align	1
 588              		.global	HAL_PWREx_ClearPendingEvent
 589              		.syntax unified
 590              		.thumb
 591              		.thumb_func
 593              	HAL_PWREx_ClearPendingEvent:
 594              	.LFB151:
 930:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 931:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
 932:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Clear pending event.
 933:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   This API clears the pending event in order to enter a given CPU
 934:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         to CSLEEP or CSTOP. It should be called just before APIs performing
 935:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         enter low power mode using Wait For Event request.
 936:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
 937:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
 938:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 939:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_ClearPendingEvent (void)
 940:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
ARM GAS  /tmp/cccgiV6Y.s 			page 45


 595              		.loc 1 940 1 is_stmt 1 view -0
 596              		.cfi_startproc
 597              		@ args = 0, pretend = 0, frame = 0
 598              		@ frame_needed = 0, uses_anonymous_args = 0
 599              		@ link register save eliminated.
 941:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (DUAL_CORE)
 942:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the current Core */
 943:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if (HAL_GetCurrentCPUID () == CM7_CPUID)
 944:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 945:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     __WFE ();
 946:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 947:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   else
 948:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 949:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     __SEV ();
 950:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     __WFE ();
 951:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 952:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #else
 953:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   __WFE ();
 600              		.loc 1 953 3 view .LVU144
 601              		.syntax unified
 602              	@ 953 "lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c" 1
 603 0000 20BF     		wfe
 604              	@ 0 "" 2
 954:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (DUAL_CORE) */
 955:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 605              		.loc 1 955 1 is_stmt 0 view .LVU145
 606              		.thumb
 607              		.syntax unified
 608 0002 7047     		bx	lr
 609              		.cfi_endproc
 610              	.LFE151:
 612              		.section	.text.HAL_PWREx_EnterSTANDBYMode,"ax",%progbits
 613              		.align	1
 614              		.global	HAL_PWREx_EnterSTANDBYMode
 615              		.syntax unified
 616              		.thumb
 617              		.thumb_func
 619              	HAL_PWREx_EnterSTANDBYMode:
 620              	.LVL36:
 621              	.LFB152:
 956:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 957:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
 958:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Enter a Domain to DSTANDBY mode.
 959:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   This API gives flexibility to manage independently each domain
 960:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         STANDBY mode. For dual core lines, this API should be executed with
 961:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         the corresponding Cortex-Mx to enter domain to DSTANDBY mode. When
 962:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         it is executed by all available Cortex-Mx, the system enter STANDBY
 963:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         mode.
 964:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         For single core lines, calling this API with D1/SRD the selected
 965:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         domain will enter the whole system in STOP if PWR_CPUCR_PDDS_D3 = 0
 966:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         and enter the whole system in STANDBY if PWR_CPUCR_PDDS_D3 = 1.
 967:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   The DStandby mode is entered when all PDDS_Dn bits in PWR_CPUCR for
 968:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         the Dn domain select Standby mode. When the system enters Standby
 969:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         mode, the voltage regulator is disabled.
 970:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   When D2 or D3 domain is in DStandby mode and the CPU sets the
 971:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         domain PDDS_Dn bit to select Stop mode, the domain remains in
 972:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         DStandby mode. The domain will only exit DStandby when the CPU
ARM GAS  /tmp/cccgiV6Y.s 			page 46


 973:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         allocates a peripheral in the domain.
 974:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   The system D3/SRD domain enters Standby mode only when the D1 and D2
 975:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         domain are in DStandby.
 976:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   Before entering DSTANDBY mode it is recommended to call
 977:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         SCB_CleanDCache function in order to clean the D-Cache and guarantee
 978:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         the data integrity for the SRAM memories.
 979:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  Domain : Specifies the Domain to enter to STANDBY mode.
 980:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *          This parameter can be one of the following values:
 981:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_D1_DOMAIN: Enter D1/CD Domain to DSTANDBY mode.
 982:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_D2_DOMAIN: Enter D2 Domain to DSTANDBY mode.
 983:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_D3_DOMAIN: Enter D3/SRD Domain to DSTANDBY mode.
 984:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None
 985:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
 986:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_EnterSTANDBYMode (uint32_t Domain)
 987:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 622              		.loc 1 987 1 is_stmt 1 view -0
 623              		.cfi_startproc
 624              		@ args = 0, pretend = 0, frame = 0
 625              		@ frame_needed = 0, uses_anonymous_args = 0
 626              		@ link register save eliminated.
 988:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the parameters */
 989:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_DOMAIN (Domain));
 627              		.loc 1 989 3 view .LVU147
 990:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 991:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Select the domain Power Down DeepSleep */
 992:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if (Domain == PWR_D1_DOMAIN)
 628              		.loc 1 992 3 view .LVU148
 629              		.loc 1 992 6 is_stmt 0 view .LVU149
 630 0000 58B9     		cbnz	r0, .L62
 993:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 994:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (DUAL_CORE)
 995:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Check current core */
 996:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     if (HAL_GetCurrentCPUID () != CM7_CPUID)
 997:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
 998:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       /*
 999:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****          When the domain selected and the cortex-mx don't match, entering
1000:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****          standby mode will not be performed
1001:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       */
1002:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       return;
1003:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
1004:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (DUAL_CORE) */
1005:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1006:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Allow DSTANDBY mode when D1/CD domain enters Deepsleep */
1007:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     SET_BIT (PWR-> CPUCR, PWR_CPUCR_PDDS_D1);
 631              		.loc 1 1007 5 is_stmt 1 view .LVU150
 632 0002 0D4A     		ldr	r2, .L66
 633 0004 1369     		ldr	r3, [r2, #16]
 634 0006 43F00103 		orr	r3, r3, #1
 635 000a 1361     		str	r3, [r2, #16]
1008:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1009:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (DUAL_CORE)
1010:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Allow DSTANDBY mode when D1/CD domain enters Deepsleep */
1011:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     SET_BIT (PWR-> CPU2CR, PWR_CPU2CR_PDDS_D1);
1012:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /*DUAL_CORE*/
1013:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1014:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Set SLEEPDEEP bit of Cortex System Control Register */
1015:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
ARM GAS  /tmp/cccgiV6Y.s 			page 47


 636              		.loc 1 1015 5 view .LVU151
 637 000c 0B4A     		ldr	r2, .L66+4
 638 000e 1369     		ldr	r3, [r2, #16]
 639 0010 43F00403 		orr	r3, r3, #4
 640 0014 1361     		str	r3, [r2, #16]
1016:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1017:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* This option is used to ensure that store operations are completed */
1018:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (__CC_ARM)
1019:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     __force_stores ();
1020:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (__CC_ARM) */
1021:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1022:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Request Wait For Interrupt */
1023:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     __WFI ();
 641              		.loc 1 1023 5 view .LVU152
 642              		.syntax unified
 643              	@ 1023 "lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c" 1
 644 0016 30BF     		wfi
 645              	@ 0 "" 2
 646              		.thumb
 647              		.syntax unified
 648 0018 7047     		bx	lr
 649              	.L62:
1024:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1025:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (PWR_CPUCR_PDDS_D2)
1026:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   else if (Domain == PWR_D2_DOMAIN)
 650              		.loc 1 1026 8 view .LVU153
 651              		.loc 1 1026 11 is_stmt 0 view .LVU154
 652 001a 0128     		cmp	r0, #1
 653 001c 05D0     		beq	.L65
1027:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1028:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Allow DSTANDBY mode when D2 domain enters Deepsleep */
1029:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     SET_BIT (PWR-> CPUCR, PWR_CPUCR_PDDS_D2);
1030:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1031:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (DUAL_CORE)
1032:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Check current core */
1033:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     if (HAL_GetCurrentCPUID () != CM4_CPUID)
1034:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
1035:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       /*
1036:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****          When the domain selected and the cortex-mx don't match, entering
1037:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****          standby mode will not be performed
1038:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       */
1039:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       return;
1040:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
1041:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1042:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Allow DSTANDBY mode when D2 domain enters Deepsleep */
1043:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     SET_BIT (PWR-> CPU2CR, PWR_CPU2CR_PDDS_D2);
1044:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1045:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Set SLEEPDEEP bit of Cortex System Control Register */
1046:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
1047:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1048:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* This option is used to ensure that store operations are completed */
1049:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (__CC_ARM)
1050:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     __force_stores ();
1051:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (__CC_ARM) */
1052:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1053:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Request Wait For Interrupt */
1054:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     __WFI ();
ARM GAS  /tmp/cccgiV6Y.s 			page 48


1055:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (DUAL_CORE) */
1056:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1057:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (PWR_CPUCR_PDDS_D2) */
1058:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   else
1059:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1060:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Allow DSTANDBY mode when D3/SRD domain enters Deepsleep */
1061:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     SET_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 654              		.loc 1 1061 5 is_stmt 1 view .LVU155
 655 001e 064A     		ldr	r2, .L66
 656 0020 1369     		ldr	r3, [r2, #16]
 657 0022 43F00403 		orr	r3, r3, #4
 658 0026 1361     		str	r3, [r2, #16]
1062:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1063:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (DUAL_CORE)
1064:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Allow DSTANDBY mode when D3/SRD domain enters Deepsleep */
1065:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     SET_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
1066:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (DUAL_CORE) */
1067:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1068:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 659              		.loc 1 1068 1 is_stmt 0 view .LVU156
 660 0028 7047     		bx	lr
 661              	.L65:
1029:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 662              		.loc 1 1029 5 is_stmt 1 view .LVU157
 663 002a 034A     		ldr	r2, .L66
 664 002c 1369     		ldr	r3, [r2, #16]
 665 002e 43F00203 		orr	r3, r3, #2
 666 0032 1361     		str	r3, [r2, #16]
 667 0034 7047     		bx	lr
 668              	.L67:
 669 0036 00BF     		.align	2
 670              	.L66:
 671 0038 00480258 		.word	1476544512
 672 003c 00ED00E0 		.word	-536810240
 673              		.cfi_endproc
 674              	.LFE152:
 676              		.section	.text.HAL_PWREx_ConfigD3Domain,"ax",%progbits
 677              		.align	1
 678              		.global	HAL_PWREx_ConfigD3Domain
 679              		.syntax unified
 680              		.thumb
 681              		.thumb_func
 683              	HAL_PWREx_ConfigD3Domain:
 684              	.LVL37:
 685              	.LFB153:
1069:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1070:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1071:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Configure the D3/SRD Domain state when the System in low power mode.
1072:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  D3State : Specifies the D3/SRD state.
1073:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *          This parameter can be one of the following values :
1074:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_D3_DOMAIN_STOP : D3/SRD domain will follow the most deep
1075:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                      CPU sub-system low power mode.
1076:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_D3_DOMAIN_RUN : D3/SRD domain will stay in RUN mode
1077:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                     regardless of the CPU sub-system low
1078:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                     power mode.
1079:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None
1080:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
ARM GAS  /tmp/cccgiV6Y.s 			page 49


1081:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_ConfigD3Domain (uint32_t D3State)
1082:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 686              		.loc 1 1082 1 view -0
 687              		.cfi_startproc
 688              		@ args = 0, pretend = 0, frame = 0
 689              		@ frame_needed = 0, uses_anonymous_args = 0
 690              		@ link register save eliminated.
1083:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the parameter */
1084:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_D3_STATE (D3State));
 691              		.loc 1 1084 3 view .LVU159
1085:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1086:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Keep D3/SRD in run mode */
1087:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   MODIFY_REG (PWR->CPUCR, PWR_CPUCR_RUN_D3, D3State);
 692              		.loc 1 1087 3 view .LVU160
 693 0000 034A     		ldr	r2, .L69
 694 0002 1369     		ldr	r3, [r2, #16]
 695 0004 23F40063 		bic	r3, r3, #2048
 696 0008 0343     		orrs	r3, r3, r0
 697 000a 1361     		str	r3, [r2, #16]
1088:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 698              		.loc 1 1088 1 is_stmt 0 view .LVU161
 699 000c 7047     		bx	lr
 700              	.L70:
 701 000e 00BF     		.align	2
 702              	.L69:
 703 0010 00480258 		.word	1476544512
 704              		.cfi_endproc
 705              	.LFE153:
 707              		.section	.text.HAL_PWREx_EnableFlashPowerDown,"ax",%progbits
 708              		.align	1
 709              		.global	HAL_PWREx_EnableFlashPowerDown
 710              		.syntax unified
 711              		.thumb
 712              		.thumb_func
 714              	HAL_PWREx_EnableFlashPowerDown:
 715              	.LFB154:
1089:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1090:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (DUAL_CORE)
1091:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1092:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Clear HOLD2F, HOLD1F, STOPF, SBF, SBF_D1, and SBF_D2 flags for a
1093:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *        given domain.
1094:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  DomainFlags : Specifies the Domain flags to be cleared.
1095:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *          This parameter can be one of the following values:
1096:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_D1_DOMAIN_FLAGS : Clear D1 Domain flags.
1097:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_D2_DOMAIN_FLAGS : Clear D2 Domain flags.
1098:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_ALL_DOMAIN_FLAGS : Clear D1 and D2 Domain flags.
1099:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
1100:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1101:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_ClearDomainFlags (uint32_t DomainFlags)
1102:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
1103:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the parameter */
1104:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_DOMAIN_FLAG (DomainFlags));
1105:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1106:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* D1 CPU flags */
1107:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if (DomainFlags == PWR_D1_DOMAIN_FLAGS)
1108:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1109:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Clear D1 domain flags (HOLD2F, STOPF, SBF, SBF_D1, and SBF_D2) */
ARM GAS  /tmp/cccgiV6Y.s 			page 50


1110:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     SET_BIT (PWR->CPUCR, PWR_CPUCR_CSSF);
1111:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1112:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* D2 CPU flags */
1113:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   else if (DomainFlags == PWR_D2_DOMAIN_FLAGS)
1114:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1115:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Clear D2 domain flags (HOLD1F, STOPF, SBF, SBF_D1, and SBF_D2) */
1116:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     SET_BIT (PWR->CPU2CR, PWR_CPU2CR_CSSF);
1117:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1118:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   else
1119:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1120:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Clear D1 domain flags (HOLD2F, STOPF, SBF, SBF_D1, and SBF_D2) */
1121:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     SET_BIT (PWR->CPUCR, PWR_CPUCR_CSSF);
1122:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Clear D2 domain flags (HOLD1F, STOPF, SBF, SBF_D1, and SBF_D2) */
1123:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     SET_BIT (PWR->CPU2CR, PWR_CPU2CR_CSSF);
1124:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1125:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
1126:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1127:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1128:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Hold the CPU and their domain peripherals when exiting STOP mode.
1129:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  CPU : Specifies the core to be held.
1130:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         This parameter can be one of the following values:
1131:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *             @arg PWR_CORE_CPU1: Hold CPU1 and set CPU2 as master.
1132:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *             @arg PWR_CORE_CPU2: Hold CPU2 and set CPU1 as master.
1133:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval HAL status
1134:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1135:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** HAL_StatusTypeDef HAL_PWREx_HoldCore (uint32_t CPU)
1136:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
1137:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   HAL_StatusTypeDef status = HAL_OK;
1138:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1139:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the parameters */
1140:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_CORE (CPU));
1141:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1142:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check CPU index */
1143:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if (CPU == PWR_CORE_CPU2)
1144:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1145:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* If CPU1 is not held */
1146:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     if ((PWR->CPU2CR & PWR_CPU2CR_HOLD1) != PWR_CPU2CR_HOLD1)
1147:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
1148:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       /* Set HOLD2 bit */
1149:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       SET_BIT (PWR->CPUCR, PWR_CPUCR_HOLD2);
1150:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
1151:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     else
1152:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
1153:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       status = HAL_ERROR;
1154:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
1155:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1156:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   else
1157:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1158:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* If CPU2 is not held */
1159:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     if ((PWR->CPUCR & PWR_CPUCR_HOLD2) != PWR_CPUCR_HOLD2)
1160:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
1161:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       /* Set HOLD1 bit */
1162:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       SET_BIT (PWR->CPU2CR, PWR_CPU2CR_HOLD1);
1163:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
1164:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     else
1165:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
1166:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       status = HAL_ERROR;
ARM GAS  /tmp/cccgiV6Y.s 			page 51


1167:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
1168:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1169:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1170:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   return status;
1171:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
1172:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1173:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1174:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Release the CPU and their domain peripherals after a wake-up from
1175:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *        STOP mode.
1176:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  CPU: Specifies the core to be released.
1177:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         This parameter can be one of the following values:
1178:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *             @arg  PWR_CORE_CPU1: Release the CPU1 and their domain
1179:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                   peripherals from holding.
1180:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *             @arg  PWR_CORE_CPU2: Release the CPU2 and their domain
1181:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                   peripherals from holding.
1182:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None
1183:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1184:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_ReleaseCore (uint32_t CPU)
1185:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
1186:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the parameters */
1187:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_CORE (CPU));
1188:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1189:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check CPU index */
1190:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if (CPU == PWR_CORE_CPU2)
1191:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1192:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Reset HOLD2 bit */
1193:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_HOLD2);
1194:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1195:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   else
1196:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1197:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Reset HOLD1 bit */
1198:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_HOLD1);
1199:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1200:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
1201:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (DUAL_CORE) */
1202:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1203:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1204:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1205:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Enable the Flash Power Down in Stop mode.
1206:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   When Flash Power Down is enabled  the Flash memory enters low-power
1207:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         mode when D1/SRD domain is in DStop mode. This feature allows to
1208:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         obtain the best trade-off between low-power consumption and restart
1209:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         time when exiting from DStop mode.
1210:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
1211:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1212:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_EnableFlashPowerDown (void)
1213:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 716              		.loc 1 1213 1 is_stmt 1 view -0
 717              		.cfi_startproc
 718              		@ args = 0, pretend = 0, frame = 0
 719              		@ frame_needed = 0, uses_anonymous_args = 0
 720              		@ link register save eliminated.
1214:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Enable the Flash Power Down */
1215:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   SET_BIT (PWR->CR1, PWR_CR1_FLPS);
 721              		.loc 1 1215 3 view .LVU163
 722 0000 024A     		ldr	r2, .L72
 723 0002 1368     		ldr	r3, [r2]
ARM GAS  /tmp/cccgiV6Y.s 			page 52


 724 0004 43F40073 		orr	r3, r3, #512
 725 0008 1360     		str	r3, [r2]
1216:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 726              		.loc 1 1216 1 is_stmt 0 view .LVU164
 727 000a 7047     		bx	lr
 728              	.L73:
 729              		.align	2
 730              	.L72:
 731 000c 00480258 		.word	1476544512
 732              		.cfi_endproc
 733              	.LFE154:
 735              		.section	.text.HAL_PWREx_DisableFlashPowerDown,"ax",%progbits
 736              		.align	1
 737              		.global	HAL_PWREx_DisableFlashPowerDown
 738              		.syntax unified
 739              		.thumb
 740              		.thumb_func
 742              	HAL_PWREx_DisableFlashPowerDown:
 743              	.LFB155:
1217:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1218:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1219:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Disable the Flash Power Down in Stop mode.
1220:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   When Flash Power Down is disabled  the Flash memory is kept on
1221:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         normal mode when D1/SRD domain is in DStop mode. This feature allows
1222:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         to obtain the best trade-off between low-power consumption and
1223:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         restart time when exiting from DStop mode.
1224:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
1225:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1226:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_DisableFlashPowerDown (void)
1227:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 744              		.loc 1 1227 1 is_stmt 1 view -0
 745              		.cfi_startproc
 746              		@ args = 0, pretend = 0, frame = 0
 747              		@ frame_needed = 0, uses_anonymous_args = 0
 748              		@ link register save eliminated.
1228:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Disable the Flash Power Down */
1229:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   CLEAR_BIT (PWR->CR1, PWR_CR1_FLPS);
 749              		.loc 1 1229 3 view .LVU166
 750 0000 024A     		ldr	r2, .L75
 751 0002 1368     		ldr	r3, [r2]
 752 0004 23F40073 		bic	r3, r3, #512
 753 0008 1360     		str	r3, [r2]
1230:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 754              		.loc 1 1230 1 is_stmt 0 view .LVU167
 755 000a 7047     		bx	lr
 756              	.L76:
 757              		.align	2
 758              	.L75:
 759 000c 00480258 		.word	1476544512
 760              		.cfi_endproc
 761              	.LFE155:
 763              		.section	.text.HAL_PWREx_EnableWakeUpPin,"ax",%progbits
 764              		.align	1
 765              		.global	HAL_PWREx_EnableWakeUpPin
 766              		.syntax unified
 767              		.thumb
 768              		.thumb_func
ARM GAS  /tmp/cccgiV6Y.s 			page 53


 770              	HAL_PWREx_EnableWakeUpPin:
 771              	.LVL38:
 772              	.LFB156:
1231:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1232:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (PWR_CR1_SRDRAMSO)
1233:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1234:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Enable memory block shut-off in DStop or DStop2 modes
1235:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   In DStop or DStop2 mode, the content of the memory blocks is
1236:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         maintained. Further power optimization can be obtained by switching
1237:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         off some memory blocks. This optimization implies loss of the memory
1238:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         content. The user can select which memory is discarded during STOP
1239:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         mode by means of xxSO bits.
1240:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  MemoryBlock : Specifies the memory block to shut-off during DStop or
1241:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                       DStop2 mode.
1242:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *          This parameter can be one of the following values:
1243:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_SRD_AHB_MEMORY_BLOCK : SmartRun domain AHB memory.
1244:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_USB_FDCAN_MEMORY_BLOCK : High-speed interfaces USB and
1245:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                              FDCAN memories.
1246:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_GFXMMU_JPEG_MEMORY_BLOCK : GFXMMU and JPEG memories.
1247:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_TCM_ECM_MEMORY_BLOCK : Instruction TCM and ETM memories.
1248:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_RAM1_AHB_MEMORY_BLOCK : AHB RAM1 memory.
1249:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_RAM2_AHB_MEMORY_BLOCK : AHB RAM2 memory.
1250:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_RAM1_AXI_MEMORY_BLOCK : AXI RAM1 memory.
1251:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_RAM2_AXI_MEMORY_BLOCK : AXI RAM2 memory.
1252:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_RAM3_AXI_MEMORY_BLOCK : AXI RAM3 memory.
1253:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
1254:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1255:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_EnableMemoryShutOff (uint32_t MemoryBlock)
1256:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
1257:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the parameter */
1258:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_MEMORY_BLOCK (MemoryBlock));
1259:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1260:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Enable memory block shut-off */
1261:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   SET_BIT (PWR->CR1, MemoryBlock);
1262:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
1263:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1264:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1265:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Disable memory block shut-off in DStop or DStop2 modes
1266:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  MemoryBlock : Specifies the memory block to keep content during
1267:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                       DStop or DStop2 mode.
1268:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *          This parameter can be one of the following values:
1269:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_SRD_AHB_MEMORY_BLOCK : SmartRun domain AHB memory.
1270:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_USB_FDCAN_MEMORY_BLOCK : High-speed interfaces USB and
1271:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                              FDCAN memories.
1272:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_GFXMMU_JPEG_MEMORY_BLOCK : GFXMMU and JPEG memories.
1273:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_TCM_ECM_MEMORY_BLOCK : Instruction TCM and ETM memories.
1274:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_RAM1_AHB_MEMORY_BLOCK : AHB RAM1 memory.
1275:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_RAM2_AHB_MEMORY_BLOCK : AHB RAM2 memory.
1276:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_RAM1_AXI_MEMORY_BLOCK : AXI RAM1 memory.
1277:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_RAM2_AXI_MEMORY_BLOCK : AXI RAM2 memory.
1278:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_RAM3_AXI_MEMORY_BLOCK : AXI RAM3 memory.
1279:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
1280:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1281:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_DisableMemoryShutOff (uint32_t MemoryBlock)
1282:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
1283:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the parameter */
1284:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_MEMORY_BLOCK (MemoryBlock));
ARM GAS  /tmp/cccgiV6Y.s 			page 54


1285:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1286:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Disable memory block shut-off */
1287:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   CLEAR_BIT (PWR->CR1, MemoryBlock);
1288:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
1289:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (PWR_CR1_SRDRAMSO) */
1290:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1291:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1292:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Enable the Wake-up PINx functionality.
1293:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  sPinParams : Pointer to a PWREx_WakeupPinTypeDef structure that
1294:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                      contains the configuration information for the wake-up
1295:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                      Pin.
1296:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   For dual core devices, please ensure to configure the EXTI lines for
1297:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         the different Cortex-Mx. All combination are allowed: wake up only
1298:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         Cortex-M7, wake up only Cortex-M4 and wake up Cortex-M7 and
1299:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         Cortex-M4.
1300:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
1301:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1302:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_EnableWakeUpPin (PWREx_WakeupPinTypeDef *sPinParams)
1303:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 773              		.loc 1 1303 1 is_stmt 1 view -0
 774              		.cfi_startproc
 775              		@ args = 0, pretend = 0, frame = 0
 776              		@ frame_needed = 0, uses_anonymous_args = 0
 777              		@ link register save eliminated.
 778              		.loc 1 1303 1 is_stmt 0 view .LVU169
 779 0000 10B4     		push	{r4}
 780              	.LCFI6:
 781              		.cfi_def_cfa_offset 4
 782              		.cfi_offset 4, -4
1304:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   uint32_t pinConfig;
 783              		.loc 1 1304 3 is_stmt 1 view .LVU170
1305:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   uint32_t regMask;
 784              		.loc 1 1305 3 view .LVU171
1306:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   const uint32_t pullMask = PWR_WKUPEPR_WKUPPUPD1;
 785              		.loc 1 1306 3 view .LVU172
 786              	.LVL39:
1307:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1308:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the parameters */
1309:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_WAKEUP_PIN (sPinParams->WakeUpPin));
 787              		.loc 1 1309 3 view .LVU173
1310:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_WAKEUP_PIN_POLARITY (sPinParams->PinPolarity));
 788              		.loc 1 1310 3 view .LVU174
1311:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_WAKEUP_PIN_PULL (sPinParams->PinPull));
 789              		.loc 1 1311 3 view .LVU175
1312:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1313:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   pinConfig = sPinParams->WakeUpPin | \
 790              		.loc 1 1313 3 view .LVU176
 791              		.loc 1 1313 25 is_stmt 0 view .LVU177
 792 0002 0368     		ldr	r3, [r0]
1314:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****               (sPinParams->PinPolarity << ((POSITION_VAL(sPinParams->WakeUpPin) + PWR_WKUPEPR_WKUPP
 793              		.loc 1 1314 26 view .LVU178
 794 0004 4168     		ldr	r1, [r0, #4]
 795              	.LVL40:
 796              	.LBB26:
 797              	.LBI26:
 947:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 948:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/cccgiV6Y.s 			page 55


 949:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 950:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 951:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 952:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 953:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 954:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 955:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 956:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 957:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 958:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 959:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 960:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 961:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 962:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 963:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 964:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 965:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 966:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 967:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 968:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 969:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 970:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 971:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 972:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 973:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 974:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 975:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 976:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 977:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 978:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 979:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 980:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 981:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 982:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 983:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 984:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 985:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 986:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 987:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 988:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 989:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 990:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 991:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 992:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 993:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 994:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 995:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 996:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 997:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 998:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 999:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
1000:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1001:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
1002:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** {
1003:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
1004:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
1005:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
ARM GAS  /tmp/cccgiV6Y.s 			page 56


1006:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
1007:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
1008:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
1009:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
1010:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
1011:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** }
1012:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
1013:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
1014:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
1015:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
1016:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
1017:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
1018:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
1019:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
1020:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1021:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
1022:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** {
1023:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
1024:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
1025:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   {
1026:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
1027:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   }
1028:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
1029:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** }
1030:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
1031:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
1032:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
1033:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
1034:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
1035:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
1036:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
1037:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
1038:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1039:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
1040:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
1041:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
1042:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
1043:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
1044:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
1045:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
1046:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
1047:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1048:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 798              		.loc 2 1048 31 is_stmt 1 view .LVU179
 799              	.LBB27:
1049:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** {
1050:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 800              		.loc 2 1050 3 view .LVU180
1051:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
1052:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
1053:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
1054:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
1055:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801              		.loc 2 1055 4 view .LVU181
 802              		.syntax unified
 803              	@ 1055 "lib/Drivers/CMSIS/Include/cmsis_gcc.h" 1
 804 0006 93FAA3F2 		rbit r2, r3
ARM GAS  /tmp/cccgiV6Y.s 			page 57


 805              	@ 0 "" 2
 806              	.LVL41:
1056:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
1057:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
1058:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
1059:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
1060:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
1061:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   {
1062:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
1063:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
1064:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
1065:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   }
1066:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
1067:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
1068:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 807              		.loc 2 1068 3 view .LVU182
 808              		.loc 2 1068 3 is_stmt 0 view .LVU183
 809              		.thumb
 810              		.syntax unified
 811              	.LBE27:
 812              	.LBE26:
 813              	.LBB28:
 814              	.LBI28:
1069:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** }
1070:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
1071:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
1072:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** /**
1073:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Count leading zeros
1074:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
1075:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
1076:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
1077:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1078:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
 815              		.loc 2 1078 30 is_stmt 1 view .LVU184
 816              	.LBB29:
1079:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** {
1080:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
1081:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
1082:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
1083:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
1084:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
1085:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****      is non-zero".
1086:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
1087:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****      single CLZ instruction.
1088:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****    */
1089:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   if (value == 0U)
 817              		.loc 2 1089 3 view .LVU185
 818              		.loc 2 1089 6 is_stmt 0 view .LVU186
 819 000a 002A     		cmp	r2, #0
 820 000c 42D0     		beq	.L82
1090:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   {
1091:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****     return 32U;
1092:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   }
1093:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_clz(value);
 821              		.loc 2 1093 3 is_stmt 1 view .LVU187
 822              		.loc 2 1093 10 is_stmt 0 view .LVU188
 823 000e B2FA82F2 		clz	r2, r2
ARM GAS  /tmp/cccgiV6Y.s 			page 58


 824              	.LVL42:
 825              	.L78:
 826              		.loc 2 1093 10 view .LVU189
 827              	.LBE29:
 828              	.LBE28:
 829              		.loc 1 1314 81 view .LVU190
 830 0012 0832     		adds	r2, r2, #8
 831              		.loc 1 1314 107 view .LVU191
 832 0014 02F01F02 		and	r2, r2, #31
 833              		.loc 1 1314 40 view .LVU192
 834 0018 01FA02F2 		lsl	r2, r1, r2
1313:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****               (sPinParams->PinPolarity << ((POSITION_VAL(sPinParams->WakeUpPin) + PWR_WKUPEPR_WKUPP
 835              		.loc 1 1313 37 view .LVU193
 836 001c 43EA0201 		orr	r1, r3, r2
1315:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****               (sPinParams->PinPull << (((POSITION_VAL(sPinParams->WakeUpPin) * PWR_WAKEUP_PINS_PULL
 837              		.loc 1 1315 26 view .LVU194
 838 0020 8468     		ldr	r4, [r0, #8]
 839              	.LVL43:
 840              	.LBB31:
 841              	.LBI31:
1048:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 842              		.loc 2 1048 31 is_stmt 1 view .LVU195
 843              	.LBB32:
1050:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 844              		.loc 2 1050 3 view .LVU196
1055:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 845              		.loc 2 1055 4 view .LVU197
 846              		.syntax unified
 847              	@ 1055 "lib/Drivers/CMSIS/Include/cmsis_gcc.h" 1
 848 0022 93FAA3F2 		rbit r2, r3
 849              	@ 0 "" 2
 850              	.LVL44:
1068:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 851              		.loc 2 1068 3 view .LVU198
1068:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 852              		.loc 2 1068 3 is_stmt 0 view .LVU199
 853              		.thumb
 854              		.syntax unified
 855              	.LBE32:
 856              	.LBE31:
 857              	.LBB33:
 858              	.LBI33:
1078:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 859              		.loc 2 1078 30 is_stmt 1 view .LVU200
 860              	.LBB34:
1089:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 861              		.loc 2 1089 3 view .LVU201
1089:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 862              		.loc 2 1089 6 is_stmt 0 view .LVU202
 863 0026 BAB3     		cbz	r2, .L83
 864              		.loc 2 1093 3 is_stmt 1 view .LVU203
 865              		.loc 2 1093 10 is_stmt 0 view .LVU204
 866 0028 B2FA82F2 		clz	r2, r2
 867              	.LVL45:
 868              	.L79:
 869              		.loc 2 1093 10 view .LVU205
 870              	.LBE34:
ARM GAS  /tmp/cccgiV6Y.s 			page 59


 871              	.LBE33:
 872              		.loc 1 1315 115 view .LVU206
 873 002c 0832     		adds	r2, r2, #8
 874 002e 5200     		lsls	r2, r2, #1
 875              		.loc 1 1315 144 view .LVU207
 876 0030 02F01E02 		and	r2, r2, #30
 877              		.loc 1 1315 36 view .LVU208
 878 0034 04FA02F2 		lsl	r2, r4, r2
1313:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****               (sPinParams->PinPolarity << ((POSITION_VAL(sPinParams->WakeUpPin) + PWR_WKUPEPR_WKUPP
 879              		.loc 1 1313 13 view .LVU209
 880 0038 0A43     		orrs	r2, r2, r1
 881              	.LVL46:
1316:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1317:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   regMask   = sPinParams->WakeUpPin | \
 882              		.loc 1 1317 3 is_stmt 1 view .LVU210
 883              	.LBB36:
 884              	.LBI36:
1048:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 885              		.loc 2 1048 31 view .LVU211
 886              	.LBB37:
1050:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 887              		.loc 2 1050 3 view .LVU212
1055:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 888              		.loc 2 1055 4 view .LVU213
 889              		.syntax unified
 890              	@ 1055 "lib/Drivers/CMSIS/Include/cmsis_gcc.h" 1
 891 003a 93FAA3F1 		rbit r1, r3
 892              	@ 0 "" 2
 893              	.LVL47:
1068:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 894              		.loc 2 1068 3 view .LVU214
1068:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 895              		.loc 2 1068 3 is_stmt 0 view .LVU215
 896              		.thumb
 897              		.syntax unified
 898              	.LBE37:
 899              	.LBE36:
 900              	.LBB38:
 901              	.LBI38:
1078:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 902              		.loc 2 1078 30 is_stmt 1 view .LVU216
 903              	.LBB39:
1089:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 904              		.loc 2 1089 3 view .LVU217
1089:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 905              		.loc 2 1089 6 is_stmt 0 view .LVU218
 906 003e 69B3     		cbz	r1, .L84
 907              		.loc 2 1093 3 is_stmt 1 view .LVU219
 908              		.loc 2 1093 10 is_stmt 0 view .LVU220
 909 0040 B1FA81F1 		clz	r1, r1
 910              	.LVL48:
 911              	.L80:
 912              		.loc 2 1093 10 view .LVU221
 913              	.LBE39:
 914              	.LBE38:
1318:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****               (PWR_WKUPEPR_WKUPP1 << (POSITION_VAL(sPinParams->WakeUpPin) & 0x1FU)) | \
 915              		.loc 1 1318 75 view .LVU222
ARM GAS  /tmp/cccgiV6Y.s 			page 60


 916 0044 01F01F0C 		and	ip, r1, #31
 917              		.loc 1 1318 35 view .LVU223
 918 0048 4FF48071 		mov	r1, #256
 919 004c 01FA0CF1 		lsl	r1, r1, ip
1317:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****               (PWR_WKUPEPR_WKUPP1 << (POSITION_VAL(sPinParams->WakeUpPin) & 0x1FU)) | \
 920              		.loc 1 1317 37 view .LVU224
 921 0050 1943     		orrs	r1, r1, r3
 922              	.LVL49:
 923              	.LBB41:
 924              	.LBI41:
1048:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 925              		.loc 2 1048 31 is_stmt 1 view .LVU225
 926              	.LBB42:
1050:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** 
 927              		.loc 2 1050 3 view .LVU226
1055:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 928              		.loc 2 1055 4 view .LVU227
 929              		.syntax unified
 930              	@ 1055 "lib/Drivers/CMSIS/Include/cmsis_gcc.h" 1
 931 0052 93FAA3F3 		rbit r3, r3
 932              	@ 0 "" 2
 933              	.LVL50:
1068:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 934              		.loc 2 1068 3 view .LVU228
1068:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** }
 935              		.loc 2 1068 3 is_stmt 0 view .LVU229
 936              		.thumb
 937              		.syntax unified
 938              	.LBE42:
 939              	.LBE41:
 940              	.LBB43:
 941              	.LBI43:
1078:lib/Drivers/CMSIS/Include/cmsis_gcc.h **** {
 942              		.loc 2 1078 30 is_stmt 1 view .LVU230
 943              	.LBB44:
1089:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 944              		.loc 2 1089 3 view .LVU231
1089:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 945              		.loc 2 1089 6 is_stmt 0 view .LVU232
 946 0056 1BB3     		cbz	r3, .L85
 947              		.loc 2 1093 3 is_stmt 1 view .LVU233
 948              		.loc 2 1093 10 is_stmt 0 view .LVU234
 949 0058 B3FA83F3 		clz	r3, r3
 950              	.LVL51:
 951              	.L81:
 952              		.loc 2 1093 10 view .LVU235
 953              	.LBE44:
 954              	.LBE43:
1319:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****               (pullMask << ((POSITION_VAL(sPinParams->WakeUpPin) * PWR_WAKEUP_PINS_PULL_SHIFT_OFFSE
 955              		.loc 1 1319 66 view .LVU236
 956 005c 5B00     		lsls	r3, r3, #1
 957              		.loc 1 1319 103 view .LVU237
 958 005e 03F01E03 		and	r3, r3, #30
 959              		.loc 1 1319 25 view .LVU238
 960 0062 4FF4403C 		mov	ip, #196608
 961 0066 0CFA03F3 		lsl	r3, ip, r3
1317:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****               (PWR_WKUPEPR_WKUPP1 << (POSITION_VAL(sPinParams->WakeUpPin) & 0x1FU)) | \
ARM GAS  /tmp/cccgiV6Y.s 			page 61


 962              		.loc 1 1317 13 view .LVU239
 963 006a 0B43     		orrs	r3, r3, r1
 964              	.LVL52:
1320:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1321:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Enable and Specify the Wake-Up pin polarity and the pull configuration
1322:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****      for the event detection (rising or falling edge) */
1323:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   MODIFY_REG (PWR->WKUPEPR, regMask, pinConfig);
 965              		.loc 1 1323 3 is_stmt 1 view .LVU240
 966 006c 0D4C     		ldr	r4, .L87
 967 006e A16A     		ldr	r1, [r4, #40]
 968 0070 21EA0303 		bic	r3, r1, r3
 969              	.LVL53:
 970              		.loc 1 1323 3 is_stmt 0 view .LVU241
 971 0074 1343     		orrs	r3, r3, r2
 972 0076 A362     		str	r3, [r4, #40]
1324:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #ifndef DUAL_CORE
1325:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Configure the Wakeup Pin EXTI Line */
1326:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   MODIFY_REG (EXTI->IMR2, PWR_EXTI_WAKEUP_PINS_MASK, (sPinParams->WakeUpPin << EXTI_IMR2_IM55_Pos))
 973              		.loc 1 1326 3 is_stmt 1 view .LVU242
 974 0078 4FF0B042 		mov	r2, #1476395008
 975              	.LVL54:
 976              		.loc 1 1326 3 is_stmt 0 view .LVU243
 977 007c D2F89030 		ldr	r3, [r2, #144]
 978 0080 23F0FC53 		bic	r3, r3, #528482304
 979 0084 0168     		ldr	r1, [r0]
 980 0086 43EAC153 		orr	r3, r3, r1, lsl #23
 981 008a C2F89030 		str	r3, [r2, #144]
1327:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* !DUAL_CORE */
1328:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 982              		.loc 1 1328 1 view .LVU244
 983 008e 5DF8044B 		ldr	r4, [sp], #4
 984              	.LCFI7:
 985              		.cfi_remember_state
 986              		.cfi_restore 4
 987              		.cfi_def_cfa_offset 0
 988 0092 7047     		bx	lr
 989              	.LVL55:
 990              	.L82:
 991              	.LCFI8:
 992              		.cfi_restore_state
 993              	.LBB46:
 994              	.LBB30:
1091:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 995              		.loc 2 1091 12 view .LVU245
 996 0094 2022     		movs	r2, #32
 997              	.LVL56:
1091:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 998              		.loc 2 1091 12 view .LVU246
 999 0096 BCE7     		b	.L78
 1000              	.LVL57:
 1001              	.L83:
1091:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 1002              		.loc 2 1091 12 view .LVU247
 1003              	.LBE30:
 1004              	.LBE46:
 1005              	.LBB47:
 1006              	.LBB35:
ARM GAS  /tmp/cccgiV6Y.s 			page 62


 1007 0098 2022     		movs	r2, #32
 1008              	.LVL58:
1091:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 1009              		.loc 2 1091 12 view .LVU248
 1010 009a C7E7     		b	.L79
 1011              	.LVL59:
 1012              	.L84:
1091:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 1013              		.loc 2 1091 12 view .LVU249
 1014              	.LBE35:
 1015              	.LBE47:
 1016              	.LBB48:
 1017              	.LBB40:
 1018 009c 2021     		movs	r1, #32
 1019              	.LVL60:
1091:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 1020              		.loc 2 1091 12 view .LVU250
 1021 009e D1E7     		b	.L80
 1022              	.LVL61:
 1023              	.L85:
1091:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 1024              		.loc 2 1091 12 view .LVU251
 1025              	.LBE40:
 1026              	.LBE48:
 1027              	.LBB49:
 1028              	.LBB45:
 1029 00a0 2023     		movs	r3, #32
 1030              	.LVL62:
1091:lib/Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 1031              		.loc 2 1091 12 view .LVU252
 1032 00a2 DBE7     		b	.L81
 1033              	.L88:
 1034              		.align	2
 1035              	.L87:
 1036 00a4 00480258 		.word	1476544512
 1037              	.LBE45:
 1038              	.LBE49:
 1039              		.cfi_endproc
 1040              	.LFE156:
 1042              		.section	.text.HAL_PWREx_DisableWakeUpPin,"ax",%progbits
 1043              		.align	1
 1044              		.global	HAL_PWREx_DisableWakeUpPin
 1045              		.syntax unified
 1046              		.thumb
 1047              		.thumb_func
 1049              	HAL_PWREx_DisableWakeUpPin:
 1050              	.LVL63:
 1051              	.LFB157:
1329:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1330:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1331:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Disable the Wake-up PINx functionality.
1332:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  WakeUpPin : Specifies the Wake-Up pin to be disabled.
1333:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *          This parameter can be one of the following values:
1334:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *           @arg PWR_WAKEUP_PIN1 : Disable PA0  wake-up PIN.
1335:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *           @arg PWR_WAKEUP_PIN2 : Disable PA2  wake-up PIN.
1336:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *           @arg PWR_WAKEUP_PIN3 : Disable PI8  wake-up PIN.
1337:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *           @arg PWR_WAKEUP_PIN4 : Disable PC13 wake-up PIN.
ARM GAS  /tmp/cccgiV6Y.s 			page 63


1338:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *           @arg PWR_WAKEUP_PIN5 : Disable PI11 wake-up PIN.
1339:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *           @arg PWR_WAKEUP_PIN6 : Disable PC1  wake-up PIN.
1340:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   The PWR_WAKEUP_PIN3 and PWR_WAKEUP_PIN5 are available only for
1341:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         devices that support GPIOI port.
1342:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None
1343:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1344:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_DisableWakeUpPin (uint32_t WakeUpPin)
1345:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 1052              		.loc 1 1345 1 is_stmt 1 view -0
 1053              		.cfi_startproc
 1054              		@ args = 0, pretend = 0, frame = 0
 1055              		@ frame_needed = 0, uses_anonymous_args = 0
 1056              		@ link register save eliminated.
1346:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the parameter */
1347:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_WAKEUP_PIN (WakeUpPin));
 1057              		.loc 1 1347 3 view .LVU254
1348:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1349:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Disable the WakeUpPin */
1350:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   CLEAR_BIT (PWR->WKUPEPR, WakeUpPin);
 1058              		.loc 1 1350 3 view .LVU255
 1059 0000 024A     		ldr	r2, .L90
 1060 0002 936A     		ldr	r3, [r2, #40]
 1061 0004 23EA0003 		bic	r3, r3, r0
 1062 0008 9362     		str	r3, [r2, #40]
1351:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 1063              		.loc 1 1351 1 is_stmt 0 view .LVU256
 1064 000a 7047     		bx	lr
 1065              	.L91:
 1066              		.align	2
 1067              	.L90:
 1068 000c 00480258 		.word	1476544512
 1069              		.cfi_endproc
 1070              	.LFE157:
 1072              		.section	.text.HAL_PWREx_GetWakeupFlag,"ax",%progbits
 1073              		.align	1
 1074              		.global	HAL_PWREx_GetWakeupFlag
 1075              		.syntax unified
 1076              		.thumb
 1077              		.thumb_func
 1079              	HAL_PWREx_GetWakeupFlag:
 1080              	.LVL64:
 1081              	.LFB158:
1352:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1353:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1354:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Get the Wake-Up Pin pending flags.
1355:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  WakeUpFlag : Specifies the Wake-Up PIN flag to be checked.
1356:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *          This parameter can be one of the following values:
1357:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_WAKEUP_FLAG1    : Get wakeup event received from PA0.
1358:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_WAKEUP_FLAG2    : Get wakeup event received from PA2.
1359:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_WAKEUP_FLAG3    : Get wakeup event received from PI8.
1360:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_WAKEUP_FLAG4    : Get wakeup event received from PC13.
1361:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_WAKEUP_FLAG5    : Get wakeup event received from PI11.
1362:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_WAKEUP_FLAG6    : Get wakeup event received from PC1.
1363:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_WAKEUP_FLAG_ALL : Get Wakeup event received from all
1364:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                      wake up pins.
1365:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   The PWR_WAKEUP_FLAG3 and PWR_WAKEUP_FLAG5 are available only for
1366:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         devices that support GPIOI port.
ARM GAS  /tmp/cccgiV6Y.s 			page 64


1367:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval The Wake-Up pin flag.
1368:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1369:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** uint32_t HAL_PWREx_GetWakeupFlag (uint32_t WakeUpFlag)
1370:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 1082              		.loc 1 1370 1 is_stmt 1 view -0
 1083              		.cfi_startproc
 1084              		@ args = 0, pretend = 0, frame = 0
 1085              		@ frame_needed = 0, uses_anonymous_args = 0
 1086              		@ link register save eliminated.
1371:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the parameters */
1372:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_WAKEUP_FLAG (WakeUpFlag));
 1087              		.loc 1 1372 3 view .LVU258
1373:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1374:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Return the wake up pin flag */
1375:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   return (PWR->WKUPFR & WakeUpFlag);
 1088              		.loc 1 1375 3 view .LVU259
 1089              		.loc 1 1375 14 is_stmt 0 view .LVU260
 1090 0000 014B     		ldr	r3, .L93
 1091 0002 5B6A     		ldr	r3, [r3, #36]
1376:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 1092              		.loc 1 1376 1 view .LVU261
 1093 0004 1840     		ands	r0, r0, r3
 1094              	.LVL65:
 1095              		.loc 1 1376 1 view .LVU262
 1096 0006 7047     		bx	lr
 1097              	.L94:
 1098              		.align	2
 1099              	.L93:
 1100 0008 00480258 		.word	1476544512
 1101              		.cfi_endproc
 1102              	.LFE158:
 1104              		.section	.text.HAL_PWREx_ClearWakeupFlag,"ax",%progbits
 1105              		.align	1
 1106              		.global	HAL_PWREx_ClearWakeupFlag
 1107              		.syntax unified
 1108              		.thumb
 1109              		.thumb_func
 1111              	HAL_PWREx_ClearWakeupFlag:
 1112              	.LVL66:
 1113              	.LFB159:
1377:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1378:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1379:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Clear the Wake-Up pin pending flag.
1380:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  WakeUpFlag: Specifies the Wake-Up PIN flag to clear.
1381:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *          This parameter can be one of the following values:
1382:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_WAKEUP_FLAG1 : Clear the wakeup event received from PA0.
1383:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_WAKEUP_FLAG2 : Clear the wakeup event received from PA2.
1384:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_WAKEUP_FLAG3 : Clear the wakeup event received from PI8.
1385:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_WAKEUP_FLAG4 : Clear the wakeup event received from PC13.
1386:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_WAKEUP_FLAG5 : Clear the wakeup event received from PI11.
1387:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_WAKEUP_FLAG6 : Clear the wakeup event received from PC1.
1388:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_WAKEUP_FLAG_ALL : Clear the wakeup events received from
1389:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                                      all wake up pins.
1390:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   The PWR_WAKEUP_FLAG3 and PWR_WAKEUP_FLAG5 are available only for
1391:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         devices that support GPIOI port.
1392:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval HAL status.
1393:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
ARM GAS  /tmp/cccgiV6Y.s 			page 65


1394:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** HAL_StatusTypeDef HAL_PWREx_ClearWakeupFlag (uint32_t WakeUpFlag)
1395:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 1114              		.loc 1 1395 1 is_stmt 1 view -0
 1115              		.cfi_startproc
 1116              		@ args = 0, pretend = 0, frame = 0
 1117              		@ frame_needed = 0, uses_anonymous_args = 0
 1118              		@ link register save eliminated.
1396:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the parameter */
1397:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_WAKEUP_FLAG (WakeUpFlag));
 1119              		.loc 1 1397 3 view .LVU264
1398:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1399:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Clear the wake up event received from wake up pin x */
1400:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   SET_BIT (PWR->WKUPCR, WakeUpFlag);
 1120              		.loc 1 1400 3 view .LVU265
 1121 0000 054B     		ldr	r3, .L98
 1122 0002 1A6A     		ldr	r2, [r3, #32]
 1123 0004 0243     		orrs	r2, r2, r0
 1124 0006 1A62     		str	r2, [r3, #32]
1401:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1402:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check if the wake up event is well cleared */
1403:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if ((PWR->WKUPFR & WakeUpFlag) != 0U)
 1125              		.loc 1 1403 3 view .LVU266
 1126              		.loc 1 1403 11 is_stmt 0 view .LVU267
 1127 0008 5B6A     		ldr	r3, [r3, #36]
 1128              		.loc 1 1403 6 view .LVU268
 1129 000a 0342     		tst	r3, r0
 1130 000c 01D1     		bne	.L97
1404:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1405:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     return HAL_ERROR;
1406:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1407:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1408:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   return HAL_OK;
 1131              		.loc 1 1408 10 view .LVU269
 1132 000e 0020     		movs	r0, #0
 1133              	.LVL67:
 1134              		.loc 1 1408 10 view .LVU270
 1135 0010 7047     		bx	lr
 1136              	.LVL68:
 1137              	.L97:
1405:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 1138              		.loc 1 1405 12 view .LVU271
 1139 0012 0120     		movs	r0, #1
 1140              	.LVL69:
1409:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 1141              		.loc 1 1409 1 view .LVU272
 1142 0014 7047     		bx	lr
 1143              	.L99:
 1144 0016 00BF     		.align	2
 1145              	.L98:
 1146 0018 00480258 		.word	1476544512
 1147              		.cfi_endproc
 1148              	.LFE159:
 1150              		.section	.text.HAL_PWREx_WKUP1_Callback,"ax",%progbits
 1151              		.align	1
 1152              		.weak	HAL_PWREx_WKUP1_Callback
 1153              		.syntax unified
 1154              		.thumb
ARM GAS  /tmp/cccgiV6Y.s 			page 66


 1155              		.thumb_func
 1157              	HAL_PWREx_WKUP1_Callback:
 1158              	.LFB161:
1410:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1411:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1412:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief This function handles the PWR WAKEUP PIN interrupt request.
1413:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   This API should be called under the WAKEUP_PIN_IRQHandler().
1414:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
1415:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1416:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_WAKEUP_PIN_IRQHandler (void)
1417:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
1418:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Wakeup pin EXTI line interrupt detected */
1419:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if (READ_BIT(PWR->WKUPFR, PWR_WKUPFR_WKUPF1) != 0U)
1420:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1421:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Clear PWR WKUPF1 flag */
1422:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     __HAL_PWR_CLEAR_WAKEUPFLAG (PWR_FLAG_WKUP1);
1423:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1424:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* PWR WKUP1 interrupt user callback */
1425:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     HAL_PWREx_WKUP1_Callback ();
1426:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1427:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   else if (READ_BIT (PWR->WKUPFR, PWR_WKUPFR_WKUPF2) != 0U)
1428:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1429:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Clear PWR WKUPF2 flag */
1430:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     __HAL_PWR_CLEAR_WAKEUPFLAG (PWR_FLAG_WKUP2);
1431:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1432:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* PWR WKUP2 interrupt user callback */
1433:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     HAL_PWREx_WKUP2_Callback ();
1434:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1435:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (PWR_WKUPFR_WKUPF3)
1436:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   else if (READ_BIT (PWR->WKUPFR, PWR_WKUPFR_WKUPF3) != 0U)
1437:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1438:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Clear PWR WKUPF3 flag */
1439:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     __HAL_PWR_CLEAR_WAKEUPFLAG (PWR_FLAG_WKUP3);
1440:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1441:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* PWR WKUP3 interrupt user callback */
1442:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     HAL_PWREx_WKUP3_Callback ();
1443:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1444:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (PWR_WKUPFR_WKUPF3) */
1445:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   else if (READ_BIT (PWR->WKUPFR, PWR_WKUPFR_WKUPF4) != 0U)
1446:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1447:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Clear PWR WKUPF4 flag */
1448:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     __HAL_PWR_CLEAR_WAKEUPFLAG (PWR_FLAG_WKUP4);
1449:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1450:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* PWR WKUP4 interrupt user callback */
1451:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     HAL_PWREx_WKUP4_Callback ();
1452:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1453:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (PWR_WKUPFR_WKUPF5)
1454:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   else if (READ_BIT (PWR->WKUPFR, PWR_WKUPFR_WKUPF5) != 0U)
1455:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1456:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Clear PWR WKUPF5 flag */
1457:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     __HAL_PWR_CLEAR_WAKEUPFLAG (PWR_FLAG_WKUP5);
1458:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1459:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* PWR WKUP5 interrupt user callback */
1460:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     HAL_PWREx_WKUP5_Callback ();
1461:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1462:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (PWR_WKUPFR_WKUPF5) */
1463:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   else
ARM GAS  /tmp/cccgiV6Y.s 			page 67


1464:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1465:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* Clear PWR WKUPF6 flag */
1466:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     __HAL_PWR_CLEAR_WAKEUPFLAG (PWR_FLAG_WKUP6);
1467:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1468:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     /* PWR WKUP6 interrupt user callback */
1469:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     HAL_PWREx_WKUP6_Callback ();
1470:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1471:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
1472:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1473:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1474:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief PWR WKUP1 interrupt callback.
1475:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
1476:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1477:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** __weak void HAL_PWREx_WKUP1_Callback (void)
1478:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 1159              		.loc 1 1478 1 is_stmt 1 view -0
 1160              		.cfi_startproc
 1161              		@ args = 0, pretend = 0, frame = 0
 1162              		@ frame_needed = 0, uses_anonymous_args = 0
 1163              		@ link register save eliminated.
1479:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* NOTE : This function should not be modified, when the callback is needed,
1480:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****             the HAL_PWREx_WKUP1Callback can be implemented in the user file
1481:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1482:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 1164              		.loc 1 1482 1 view .LVU274
 1165 0000 7047     		bx	lr
 1166              		.cfi_endproc
 1167              	.LFE161:
 1169              		.section	.text.HAL_PWREx_WKUP2_Callback,"ax",%progbits
 1170              		.align	1
 1171              		.weak	HAL_PWREx_WKUP2_Callback
 1172              		.syntax unified
 1173              		.thumb
 1174              		.thumb_func
 1176              	HAL_PWREx_WKUP2_Callback:
 1177              	.LFB162:
1483:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1484:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1485:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief PWR WKUP2 interrupt callback.
1486:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
1487:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1488:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** __weak void HAL_PWREx_WKUP2_Callback (void)
1489:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 1178              		.loc 1 1489 1 view -0
 1179              		.cfi_startproc
 1180              		@ args = 0, pretend = 0, frame = 0
 1181              		@ frame_needed = 0, uses_anonymous_args = 0
 1182              		@ link register save eliminated.
1490:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* NOTE : This function should not be modified, when the callback is needed,
1491:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****             the HAL_PWREx_WKUP2Callback can be implemented in the user file
1492:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1493:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 1183              		.loc 1 1493 1 view .LVU276
 1184 0000 7047     		bx	lr
 1185              		.cfi_endproc
 1186              	.LFE162:
 1188              		.section	.text.HAL_PWREx_WKUP3_Callback,"ax",%progbits
ARM GAS  /tmp/cccgiV6Y.s 			page 68


 1189              		.align	1
 1190              		.weak	HAL_PWREx_WKUP3_Callback
 1191              		.syntax unified
 1192              		.thumb
 1193              		.thumb_func
 1195              	HAL_PWREx_WKUP3_Callback:
 1196              	.LFB163:
1494:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1495:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (PWR_WKUPFR_WKUPF3)
1496:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1497:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief PWR WKUP3 interrupt callback.
1498:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
1499:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1500:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** __weak void HAL_PWREx_WKUP3_Callback (void)
1501:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 1197              		.loc 1 1501 1 view -0
 1198              		.cfi_startproc
 1199              		@ args = 0, pretend = 0, frame = 0
 1200              		@ frame_needed = 0, uses_anonymous_args = 0
 1201              		@ link register save eliminated.
1502:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* NOTE : This function should not be modified, when the callback is needed,
1503:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****             the HAL_PWREx_WKUP3Callback can be implemented in the user file
1504:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1505:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 1202              		.loc 1 1505 1 view .LVU278
 1203 0000 7047     		bx	lr
 1204              		.cfi_endproc
 1205              	.LFE163:
 1207              		.section	.text.HAL_PWREx_WKUP4_Callback,"ax",%progbits
 1208              		.align	1
 1209              		.weak	HAL_PWREx_WKUP4_Callback
 1210              		.syntax unified
 1211              		.thumb
 1212              		.thumb_func
 1214              	HAL_PWREx_WKUP4_Callback:
 1215              	.LFB164:
1506:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (PWR_WKUPFR_WKUPF3) */
1507:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1508:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1509:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief PWR WKUP4 interrupt callback.
1510:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
1511:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1512:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** __weak void HAL_PWREx_WKUP4_Callback (void)
1513:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 1216              		.loc 1 1513 1 view -0
 1217              		.cfi_startproc
 1218              		@ args = 0, pretend = 0, frame = 0
 1219              		@ frame_needed = 0, uses_anonymous_args = 0
 1220              		@ link register save eliminated.
1514:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* NOTE : This function should not be modified, when the callback is needed,
1515:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****             the HAL_PWREx_WKUP4Callback can be implemented in the user file
1516:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1517:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 1221              		.loc 1 1517 1 view .LVU280
 1222 0000 7047     		bx	lr
 1223              		.cfi_endproc
 1224              	.LFE164:
ARM GAS  /tmp/cccgiV6Y.s 			page 69


 1226              		.section	.text.HAL_PWREx_WKUP5_Callback,"ax",%progbits
 1227              		.align	1
 1228              		.weak	HAL_PWREx_WKUP5_Callback
 1229              		.syntax unified
 1230              		.thumb
 1231              		.thumb_func
 1233              	HAL_PWREx_WKUP5_Callback:
 1234              	.LFB165:
1518:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1519:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (PWR_WKUPFR_WKUPF5)
1520:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1521:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief PWR WKUP5 interrupt callback.
1522:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
1523:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1524:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** __weak void HAL_PWREx_WKUP5_Callback (void)
1525:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 1235              		.loc 1 1525 1 view -0
 1236              		.cfi_startproc
 1237              		@ args = 0, pretend = 0, frame = 0
 1238              		@ frame_needed = 0, uses_anonymous_args = 0
 1239              		@ link register save eliminated.
1526:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* NOTE : This function should not be modified, when the callback is needed,
1527:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****             the HAL_PWREx_WKUP5Callback can be implemented in the user file
1528:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1529:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 1240              		.loc 1 1529 1 view .LVU282
 1241 0000 7047     		bx	lr
 1242              		.cfi_endproc
 1243              	.LFE165:
 1245              		.section	.text.HAL_PWREx_WKUP6_Callback,"ax",%progbits
 1246              		.align	1
 1247              		.weak	HAL_PWREx_WKUP6_Callback
 1248              		.syntax unified
 1249              		.thumb
 1250              		.thumb_func
 1252              	HAL_PWREx_WKUP6_Callback:
 1253              	.LFB166:
1530:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (PWR_WKUPFR_WKUPF5) */
1531:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1532:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1533:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief PWR WKUP6 interrupt callback.
1534:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
1535:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1536:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** __weak void HAL_PWREx_WKUP6_Callback (void)
1537:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 1254              		.loc 1 1537 1 view -0
 1255              		.cfi_startproc
 1256              		@ args = 0, pretend = 0, frame = 0
 1257              		@ frame_needed = 0, uses_anonymous_args = 0
 1258              		@ link register save eliminated.
1538:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* NOTE : This function should not be modified, when the callback is needed,
1539:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****             the HAL_PWREx_WKUP6Callback can be implemented in the user file
1540:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1541:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 1259              		.loc 1 1541 1 view .LVU284
 1260 0000 7047     		bx	lr
 1261              		.cfi_endproc
ARM GAS  /tmp/cccgiV6Y.s 			page 70


 1262              	.LFE166:
 1264              		.section	.text.HAL_PWREx_WAKEUP_PIN_IRQHandler,"ax",%progbits
 1265              		.align	1
 1266              		.global	HAL_PWREx_WAKEUP_PIN_IRQHandler
 1267              		.syntax unified
 1268              		.thumb
 1269              		.thumb_func
 1271              	HAL_PWREx_WAKEUP_PIN_IRQHandler:
 1272              	.LFB160:
1417:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Wakeup pin EXTI line interrupt detected */
 1273              		.loc 1 1417 1 view -0
 1274              		.cfi_startproc
 1275              		@ args = 0, pretend = 0, frame = 0
 1276              		@ frame_needed = 0, uses_anonymous_args = 0
 1277 0000 08B5     		push	{r3, lr}
 1278              	.LCFI9:
 1279              		.cfi_def_cfa_offset 8
 1280              		.cfi_offset 3, -8
 1281              		.cfi_offset 14, -4
1419:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 1282              		.loc 1 1419 3 view .LVU286
1419:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 1283              		.loc 1 1419 7 is_stmt 0 view .LVU287
 1284 0002 244B     		ldr	r3, .L118
 1285 0004 5B6A     		ldr	r3, [r3, #36]
1419:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 1286              		.loc 1 1419 6 view .LVU288
 1287 0006 13F0010F 		tst	r3, #1
 1288 000a 1BD1     		bne	.L114
1427:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 1289              		.loc 1 1427 8 is_stmt 1 view .LVU289
1427:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 1290              		.loc 1 1427 12 is_stmt 0 view .LVU290
 1291 000c 214B     		ldr	r3, .L118
 1292 000e 5B6A     		ldr	r3, [r3, #36]
1427:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 1293              		.loc 1 1427 11 view .LVU291
 1294 0010 13F0020F 		tst	r3, #2
 1295 0014 1ED1     		bne	.L115
1436:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 1296              		.loc 1 1436 8 is_stmt 1 view .LVU292
1436:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 1297              		.loc 1 1436 12 is_stmt 0 view .LVU293
 1298 0016 1F4B     		ldr	r3, .L118
 1299 0018 5B6A     		ldr	r3, [r3, #36]
1436:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 1300              		.loc 1 1436 11 view .LVU294
 1301 001a 13F0040F 		tst	r3, #4
 1302 001e 21D1     		bne	.L116
1445:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 1303              		.loc 1 1445 8 is_stmt 1 view .LVU295
1445:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 1304              		.loc 1 1445 12 is_stmt 0 view .LVU296
 1305 0020 1C4B     		ldr	r3, .L118
 1306 0022 5B6A     		ldr	r3, [r3, #36]
1445:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 1307              		.loc 1 1445 11 view .LVU297
ARM GAS  /tmp/cccgiV6Y.s 			page 71


 1308 0024 13F0080F 		tst	r3, #8
 1309 0028 24D1     		bne	.L117
1454:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 1310              		.loc 1 1454 8 is_stmt 1 view .LVU298
1454:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 1311              		.loc 1 1454 12 is_stmt 0 view .LVU299
 1312 002a 1A4B     		ldr	r3, .L118
 1313 002c 5B6A     		ldr	r3, [r3, #36]
1454:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 1314              		.loc 1 1454 11 view .LVU300
 1315 002e 13F0100F 		tst	r3, #16
 1316 0032 27D0     		beq	.L112
1457:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 1317              		.loc 1 1457 5 is_stmt 1 view .LVU301
 1318 0034 174A     		ldr	r2, .L118
 1319 0036 136A     		ldr	r3, [r2, #32]
 1320 0038 43F01003 		orr	r3, r3, #16
 1321 003c 1362     		str	r3, [r2, #32]
1460:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 1322              		.loc 1 1460 5 view .LVU302
 1323 003e FFF7FEFF 		bl	HAL_PWREx_WKUP5_Callback
 1324              	.LVL70:
 1325 0042 06E0     		b	.L106
 1326              	.L114:
1422:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 1327              		.loc 1 1422 5 view .LVU303
 1328 0044 134A     		ldr	r2, .L118
 1329 0046 136A     		ldr	r3, [r2, #32]
 1330 0048 43F00103 		orr	r3, r3, #1
 1331 004c 1362     		str	r3, [r2, #32]
1425:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 1332              		.loc 1 1425 5 view .LVU304
 1333 004e FFF7FEFF 		bl	HAL_PWREx_WKUP1_Callback
 1334              	.LVL71:
 1335              	.L106:
1471:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 1336              		.loc 1 1471 1 is_stmt 0 view .LVU305
 1337 0052 08BD     		pop	{r3, pc}
 1338              	.L115:
1430:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 1339              		.loc 1 1430 5 is_stmt 1 view .LVU306
 1340 0054 0F4A     		ldr	r2, .L118
 1341 0056 136A     		ldr	r3, [r2, #32]
 1342 0058 43F00203 		orr	r3, r3, #2
 1343 005c 1362     		str	r3, [r2, #32]
1433:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 1344              		.loc 1 1433 5 view .LVU307
 1345 005e FFF7FEFF 		bl	HAL_PWREx_WKUP2_Callback
 1346              	.LVL72:
 1347 0062 F6E7     		b	.L106
 1348              	.L116:
1439:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 1349              		.loc 1 1439 5 view .LVU308
 1350 0064 0B4A     		ldr	r2, .L118
 1351 0066 136A     		ldr	r3, [r2, #32]
 1352 0068 43F00403 		orr	r3, r3, #4
 1353 006c 1362     		str	r3, [r2, #32]
ARM GAS  /tmp/cccgiV6Y.s 			page 72


1442:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 1354              		.loc 1 1442 5 view .LVU309
 1355 006e FFF7FEFF 		bl	HAL_PWREx_WKUP3_Callback
 1356              	.LVL73:
 1357 0072 EEE7     		b	.L106
 1358              	.L117:
1448:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 1359              		.loc 1 1448 5 view .LVU310
 1360 0074 074A     		ldr	r2, .L118
 1361 0076 136A     		ldr	r3, [r2, #32]
 1362 0078 43F00803 		orr	r3, r3, #8
 1363 007c 1362     		str	r3, [r2, #32]
1451:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 1364              		.loc 1 1451 5 view .LVU311
 1365 007e FFF7FEFF 		bl	HAL_PWREx_WKUP4_Callback
 1366              	.LVL74:
 1367 0082 E6E7     		b	.L106
 1368              	.L112:
1466:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 1369              		.loc 1 1466 5 view .LVU312
 1370 0084 034A     		ldr	r2, .L118
 1371 0086 136A     		ldr	r3, [r2, #32]
 1372 0088 43F02003 		orr	r3, r3, #32
 1373 008c 1362     		str	r3, [r2, #32]
1469:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
 1374              		.loc 1 1469 5 view .LVU313
 1375 008e FFF7FEFF 		bl	HAL_PWREx_WKUP6_Callback
 1376              	.LVL75:
1471:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 1377              		.loc 1 1471 1 is_stmt 0 view .LVU314
 1378 0092 DEE7     		b	.L106
 1379              	.L119:
 1380              		.align	2
 1381              	.L118:
 1382 0094 00480258 		.word	1476544512
 1383              		.cfi_endproc
 1384              	.LFE160:
 1386              		.section	.text.HAL_PWREx_EnableBkUpReg,"ax",%progbits
 1387              		.align	1
 1388              		.global	HAL_PWREx_EnableBkUpReg
 1389              		.syntax unified
 1390              		.thumb
 1391              		.thumb_func
 1393              	HAL_PWREx_EnableBkUpReg:
 1394              	.LFB167:
1542:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1543:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @}
1544:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1545:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1546:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /** @defgroup PWREx_Exported_Functions_Group3 Peripherals control functions
1547:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief    Peripherals control functions
1548:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *
1549:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** @verbatim
1550:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****  ===============================================================================
1551:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****                  ##### Peripherals control functions #####
1552:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****  ===============================================================================
1553:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
ARM GAS  /tmp/cccgiV6Y.s 			page 73


1554:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     *** Main and Backup Regulators configuration ***
1555:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     ================================================
1556:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     [..]
1557:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) The backup domain includes 4 Kbytes of backup SRAM accessible only
1558:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           from the CPU, and addressed in 32-bit, 16-bit or 8-bit mode. Its
1559:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           content is retained even in Standby or VBAT mode when the low power
1560:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           backup regulator is enabled. It can be considered as an internal
1561:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           EEPROM when VBAT is always present. You can use the
1562:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           HAL_PWREx_EnableBkUpReg() function to enable the low power backup
1563:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           regulator.
1564:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) When the backup domain is supplied by VDD (analog switch connected to
1565:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           VDD) the backup SRAM is powered from VDD which replaces the VBAT power
1566:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           supply to save battery life.
1567:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) The backup SRAM is not mass erased by a tamper event. It is read
1568:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           protected to prevent confidential data, such as cryptographic private
1569:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           key, from being accessed. The backup SRAM can be erased only through
1570:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           the Flash interface when a protection level change from level 1 to
1571:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           level 0 is requested.
1572:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       -@- Refer to the description of Read protection (RDP) in the Flash
1573:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           programming manual.
1574:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) The main internal regulator can be configured to have a tradeoff
1575:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           between performance and power consumption when the device does not
1576:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           operate at the maximum frequency. This is done through
1577:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           HAL_PWREx_ControlVoltageScaling(VOS) function which configure the VOS
1578:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           bit in PWR_D3CR register.
1579:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) The main internal regulator can be configured to operate in Low Power
1580:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           mode when the system enters STOP mode to further reduce power
1581:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           consumption.
1582:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           This is done through HAL_PWREx_ControlStopModeVoltageScaling(SVOS)
1583:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           function which configure the SVOS bit in PWR_CR1 register.
1584:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           The selected SVOS4 and SVOS5 levels add an additional startup delay
1585:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           when exiting from system Stop mode.
1586:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     -@- Refer to the product datasheets for more details.
1587:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1588:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     *** USB Regulator configuration ***
1589:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     ===================================
1590:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     [..]
1591:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) The USB transceivers are supplied from a dedicated VDD33USB supply
1592:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           that can be provided either by the integrated USB regulator, or by an
1593:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           external USB supply.
1594:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) The USB regulator is enabled by HAL_PWREx_EnableUSBReg() function, the
1595:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           VDD33USB is then provided from the USB regulator.
1596:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) When the USB regulator is enabled, the VDD33USB supply level detector
1597:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           shall be enabled through  HAL_PWREx_EnableUSBVoltageDetector()
1598:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           function.
1599:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) The USB regulator is disabled through HAL_PWREx_DisableUSBReg()
1600:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           function and VDD33USB can be provided from an external supply. In this
1601:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           case VDD33USB and VDD50USB shall be connected together.
1602:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1603:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     *** VBAT battery charging ***
1604:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     =============================
1605:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     [..]
1606:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) When VDD is present, the external battery connected to VBAT can be
1607:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           charged through an internal resistance. VBAT charging can be performed
1608:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           either through a 5 KOhm resistor or through a 1.5 KOhm resistor.
1609:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) VBAT charging is enabled by HAL_PWREx_EnableBatteryCharging
1610:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           (ResistorValue) function with:
ARM GAS  /tmp/cccgiV6Y.s 			page 74


1611:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****        (++) ResistorValue:
1612:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         (+++) PWR_BATTERY_CHARGING_RESISTOR_5: 5 KOhm resistor.
1613:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         (+++) PWR_BATTERY_CHARGING_RESISTOR_1_5: 1.5 KOhm resistor.
1614:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) VBAT charging is disabled by HAL_PWREx_DisableBatteryCharging()
1615:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           function.
1616:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1617:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** @endverbatim
1618:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @{
1619:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1620:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1621:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1622:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Enable the Backup Regulator.
1623:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval HAL status.
1624:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1625:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** HAL_StatusTypeDef HAL_PWREx_EnableBkUpReg (void)
1626:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 1395              		.loc 1 1626 1 is_stmt 1 view -0
 1396              		.cfi_startproc
 1397              		@ args = 0, pretend = 0, frame = 0
 1398              		@ frame_needed = 0, uses_anonymous_args = 0
 1399 0000 10B5     		push	{r4, lr}
 1400              	.LCFI10:
 1401              		.cfi_def_cfa_offset 8
 1402              		.cfi_offset 4, -8
 1403              		.cfi_offset 14, -4
1627:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   uint32_t tickstart;
 1404              		.loc 1 1627 3 view .LVU316
1628:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1629:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Enable the Backup regulator */
1630:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   SET_BIT (PWR->CR2, PWR_CR2_BREN);
 1405              		.loc 1 1630 3 view .LVU317
 1406 0002 0B4A     		ldr	r2, .L127
 1407 0004 9368     		ldr	r3, [r2, #8]
 1408 0006 43F00103 		orr	r3, r3, #1
 1409 000a 9360     		str	r3, [r2, #8]
1631:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1632:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Get tick */
1633:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   tickstart = HAL_GetTick ();
 1410              		.loc 1 1633 3 view .LVU318
 1411              		.loc 1 1633 15 is_stmt 0 view .LVU319
 1412 000c FFF7FEFF 		bl	HAL_GetTick
 1413              	.LVL76:
 1414 0010 0446     		mov	r4, r0
 1415              	.LVL77:
1634:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1635:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Wait till Backup regulator ready flag is set */
1636:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   while (__HAL_PWR_GET_FLAG (PWR_FLAG_BRR) == 0U)
 1416              		.loc 1 1636 3 is_stmt 1 view .LVU320
 1417              	.L121:
 1418              		.loc 1 1636 44 view .LVU321
 1419              		.loc 1 1636 10 is_stmt 0 view .LVU322
 1420 0012 074B     		ldr	r3, .L127
 1421 0014 9B68     		ldr	r3, [r3, #8]
 1422              		.loc 1 1636 44 view .LVU323
 1423 0016 13F4803F 		tst	r3, #65536
 1424 001a 07D1     		bne	.L126
1637:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
ARM GAS  /tmp/cccgiV6Y.s 			page 75


1638:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     if ((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY)
 1425              		.loc 1 1638 5 is_stmt 1 view .LVU324
 1426              		.loc 1 1638 10 is_stmt 0 view .LVU325
 1427 001c FFF7FEFF 		bl	HAL_GetTick
 1428              	.LVL78:
 1429              		.loc 1 1638 24 view .LVU326
 1430 0020 001B     		subs	r0, r0, r4
 1431              		.loc 1 1638 8 view .LVU327
 1432 0022 B0F57A7F 		cmp	r0, #1000
 1433 0026 F4D9     		bls	.L121
1639:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
1640:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       return HAL_ERROR;
 1434              		.loc 1 1640 14 view .LVU328
 1435 0028 0120     		movs	r0, #1
 1436 002a 00E0     		b	.L122
 1437              	.L126:
1641:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
1642:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1643:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1644:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   return HAL_OK;
 1438              		.loc 1 1644 10 view .LVU329
 1439 002c 0020     		movs	r0, #0
 1440              	.L122:
1645:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 1441              		.loc 1 1645 1 view .LVU330
 1442 002e 10BD     		pop	{r4, pc}
 1443              	.LVL79:
 1444              	.L128:
 1445              		.loc 1 1645 1 view .LVU331
 1446              		.align	2
 1447              	.L127:
 1448 0030 00480258 		.word	1476544512
 1449              		.cfi_endproc
 1450              	.LFE167:
 1452              		.section	.text.HAL_PWREx_DisableBkUpReg,"ax",%progbits
 1453              		.align	1
 1454              		.global	HAL_PWREx_DisableBkUpReg
 1455              		.syntax unified
 1456              		.thumb
 1457              		.thumb_func
 1459              	HAL_PWREx_DisableBkUpReg:
 1460              	.LFB168:
1646:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1647:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1648:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Disable the Backup Regulator.
1649:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval HAL status.
1650:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1651:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** HAL_StatusTypeDef HAL_PWREx_DisableBkUpReg (void)
1652:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 1461              		.loc 1 1652 1 is_stmt 1 view -0
 1462              		.cfi_startproc
 1463              		@ args = 0, pretend = 0, frame = 0
 1464              		@ frame_needed = 0, uses_anonymous_args = 0
 1465 0000 10B5     		push	{r4, lr}
 1466              	.LCFI11:
 1467              		.cfi_def_cfa_offset 8
 1468              		.cfi_offset 4, -8
ARM GAS  /tmp/cccgiV6Y.s 			page 76


 1469              		.cfi_offset 14, -4
1653:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   uint32_t tickstart;
 1470              		.loc 1 1653 3 view .LVU333
1654:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1655:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Disable the Backup regulator */
1656:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   CLEAR_BIT (PWR->CR2, PWR_CR2_BREN);
 1471              		.loc 1 1656 3 view .LVU334
 1472 0002 0B4A     		ldr	r2, .L136
 1473 0004 9368     		ldr	r3, [r2, #8]
 1474 0006 23F00103 		bic	r3, r3, #1
 1475 000a 9360     		str	r3, [r2, #8]
1657:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1658:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Get tick */
1659:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   tickstart = HAL_GetTick ();
 1476              		.loc 1 1659 3 view .LVU335
 1477              		.loc 1 1659 15 is_stmt 0 view .LVU336
 1478 000c FFF7FEFF 		bl	HAL_GetTick
 1479              	.LVL80:
 1480 0010 0446     		mov	r4, r0
 1481              	.LVL81:
1660:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1661:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Wait till Backup regulator ready flag is reset */
1662:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   while (__HAL_PWR_GET_FLAG (PWR_FLAG_BRR) != 0U)
 1482              		.loc 1 1662 3 is_stmt 1 view .LVU337
 1483              	.L130:
 1484              		.loc 1 1662 44 view .LVU338
 1485              		.loc 1 1662 10 is_stmt 0 view .LVU339
 1486 0012 074B     		ldr	r3, .L136
 1487 0014 9B68     		ldr	r3, [r3, #8]
 1488              		.loc 1 1662 44 view .LVU340
 1489 0016 13F4803F 		tst	r3, #65536
 1490 001a 07D0     		beq	.L135
1663:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1664:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     if ((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY)
 1491              		.loc 1 1664 5 is_stmt 1 view .LVU341
 1492              		.loc 1 1664 10 is_stmt 0 view .LVU342
 1493 001c FFF7FEFF 		bl	HAL_GetTick
 1494              	.LVL82:
 1495              		.loc 1 1664 24 view .LVU343
 1496 0020 001B     		subs	r0, r0, r4
 1497              		.loc 1 1664 8 view .LVU344
 1498 0022 B0F57A7F 		cmp	r0, #1000
 1499 0026 F4D9     		bls	.L130
1665:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
1666:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       return HAL_ERROR;
 1500              		.loc 1 1666 14 view .LVU345
 1501 0028 0120     		movs	r0, #1
 1502 002a 00E0     		b	.L131
 1503              	.L135:
1667:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
1668:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1669:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1670:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   return HAL_OK;
 1504              		.loc 1 1670 10 view .LVU346
 1505 002c 0020     		movs	r0, #0
 1506              	.L131:
1671:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
ARM GAS  /tmp/cccgiV6Y.s 			page 77


 1507              		.loc 1 1671 1 view .LVU347
 1508 002e 10BD     		pop	{r4, pc}
 1509              	.LVL83:
 1510              	.L137:
 1511              		.loc 1 1671 1 view .LVU348
 1512              		.align	2
 1513              	.L136:
 1514 0030 00480258 		.word	1476544512
 1515              		.cfi_endproc
 1516              	.LFE168:
 1518              		.section	.text.HAL_PWREx_EnableUSBReg,"ax",%progbits
 1519              		.align	1
 1520              		.global	HAL_PWREx_EnableUSBReg
 1521              		.syntax unified
 1522              		.thumb
 1523              		.thumb_func
 1525              	HAL_PWREx_EnableUSBReg:
 1526              	.LFB169:
1672:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1673:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1674:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Enable the USB Regulator.
1675:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval HAL status.
1676:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1677:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** HAL_StatusTypeDef HAL_PWREx_EnableUSBReg (void)
1678:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 1527              		.loc 1 1678 1 is_stmt 1 view -0
 1528              		.cfi_startproc
 1529              		@ args = 0, pretend = 0, frame = 0
 1530              		@ frame_needed = 0, uses_anonymous_args = 0
 1531 0000 10B5     		push	{r4, lr}
 1532              	.LCFI12:
 1533              		.cfi_def_cfa_offset 8
 1534              		.cfi_offset 4, -8
 1535              		.cfi_offset 14, -4
1679:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   uint32_t tickstart;
 1536              		.loc 1 1679 3 view .LVU350
1680:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1681:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Enable the USB regulator */
1682:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   SET_BIT (PWR->CR3, PWR_CR3_USBREGEN);
 1537              		.loc 1 1682 3 view .LVU351
 1538 0002 0B4A     		ldr	r2, .L145
 1539 0004 D368     		ldr	r3, [r2, #12]
 1540 0006 43F00073 		orr	r3, r3, #33554432
 1541 000a D360     		str	r3, [r2, #12]
1683:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1684:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Get tick */
1685:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   tickstart = HAL_GetTick ();
 1542              		.loc 1 1685 3 view .LVU352
 1543              		.loc 1 1685 15 is_stmt 0 view .LVU353
 1544 000c FFF7FEFF 		bl	HAL_GetTick
 1545              	.LVL84:
 1546 0010 0446     		mov	r4, r0
 1547              	.LVL85:
1686:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1687:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Wait till the USB regulator ready flag is set */
1688:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   while (__HAL_PWR_GET_FLAG (PWR_FLAG_USB33RDY) == 0U)
 1548              		.loc 1 1688 3 is_stmt 1 view .LVU354
ARM GAS  /tmp/cccgiV6Y.s 			page 78


 1549              	.L139:
 1550              		.loc 1 1688 49 view .LVU355
 1551              		.loc 1 1688 10 is_stmt 0 view .LVU356
 1552 0012 074B     		ldr	r3, .L145
 1553 0014 DB68     		ldr	r3, [r3, #12]
 1554              		.loc 1 1688 49 view .LVU357
 1555 0016 13F0806F 		tst	r3, #67108864
 1556 001a 07D1     		bne	.L144
1689:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1690:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     if ((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY)
 1557              		.loc 1 1690 5 is_stmt 1 view .LVU358
 1558              		.loc 1 1690 10 is_stmt 0 view .LVU359
 1559 001c FFF7FEFF 		bl	HAL_GetTick
 1560              	.LVL86:
 1561              		.loc 1 1690 24 view .LVU360
 1562 0020 001B     		subs	r0, r0, r4
 1563              		.loc 1 1690 8 view .LVU361
 1564 0022 B0F57A7F 		cmp	r0, #1000
 1565 0026 F4D9     		bls	.L139
1691:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
1692:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       return HAL_ERROR;
 1566              		.loc 1 1692 14 view .LVU362
 1567 0028 0120     		movs	r0, #1
 1568 002a 00E0     		b	.L140
 1569              	.L144:
1693:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
1694:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1695:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1696:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   return HAL_OK;
 1570              		.loc 1 1696 10 view .LVU363
 1571 002c 0020     		movs	r0, #0
 1572              	.L140:
1697:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 1573              		.loc 1 1697 1 view .LVU364
 1574 002e 10BD     		pop	{r4, pc}
 1575              	.LVL87:
 1576              	.L146:
 1577              		.loc 1 1697 1 view .LVU365
 1578              		.align	2
 1579              	.L145:
 1580 0030 00480258 		.word	1476544512
 1581              		.cfi_endproc
 1582              	.LFE169:
 1584              		.section	.text.HAL_PWREx_DisableUSBReg,"ax",%progbits
 1585              		.align	1
 1586              		.global	HAL_PWREx_DisableUSBReg
 1587              		.syntax unified
 1588              		.thumb
 1589              		.thumb_func
 1591              	HAL_PWREx_DisableUSBReg:
 1592              	.LFB170:
1698:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1699:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1700:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Disable the USB Regulator.
1701:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval HAL status.
1702:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1703:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** HAL_StatusTypeDef HAL_PWREx_DisableUSBReg (void)
ARM GAS  /tmp/cccgiV6Y.s 			page 79


1704:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 1593              		.loc 1 1704 1 is_stmt 1 view -0
 1594              		.cfi_startproc
 1595              		@ args = 0, pretend = 0, frame = 0
 1596              		@ frame_needed = 0, uses_anonymous_args = 0
 1597 0000 10B5     		push	{r4, lr}
 1598              	.LCFI13:
 1599              		.cfi_def_cfa_offset 8
 1600              		.cfi_offset 4, -8
 1601              		.cfi_offset 14, -4
1705:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   uint32_t tickstart;
 1602              		.loc 1 1705 3 view .LVU367
1706:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1707:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Disable the USB regulator */
1708:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   CLEAR_BIT (PWR->CR3, PWR_CR3_USBREGEN);
 1603              		.loc 1 1708 3 view .LVU368
 1604 0002 0B4A     		ldr	r2, .L154
 1605 0004 D368     		ldr	r3, [r2, #12]
 1606 0006 23F00073 		bic	r3, r3, #33554432
 1607 000a D360     		str	r3, [r2, #12]
1709:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1710:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Get tick */
1711:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   tickstart = HAL_GetTick ();
 1608              		.loc 1 1711 3 view .LVU369
 1609              		.loc 1 1711 15 is_stmt 0 view .LVU370
 1610 000c FFF7FEFF 		bl	HAL_GetTick
 1611              	.LVL88:
 1612 0010 0446     		mov	r4, r0
 1613              	.LVL89:
1712:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1713:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Wait till the USB regulator ready flag is reset */
1714:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   while(__HAL_PWR_GET_FLAG (PWR_FLAG_USB33RDY) != 0U)
 1614              		.loc 1 1714 3 is_stmt 1 view .LVU371
 1615              	.L148:
 1616              		.loc 1 1714 48 view .LVU372
 1617              		.loc 1 1714 9 is_stmt 0 view .LVU373
 1618 0012 074B     		ldr	r3, .L154
 1619 0014 DB68     		ldr	r3, [r3, #12]
 1620              		.loc 1 1714 48 view .LVU374
 1621 0016 13F0806F 		tst	r3, #67108864
 1622 001a 07D0     		beq	.L153
1715:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1716:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     if ((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY)
 1623              		.loc 1 1716 5 is_stmt 1 view .LVU375
 1624              		.loc 1 1716 10 is_stmt 0 view .LVU376
 1625 001c FFF7FEFF 		bl	HAL_GetTick
 1626              	.LVL90:
 1627              		.loc 1 1716 24 view .LVU377
 1628 0020 001B     		subs	r0, r0, r4
 1629              		.loc 1 1716 8 view .LVU378
 1630 0022 B0F57A7F 		cmp	r0, #1000
 1631 0026 F4D9     		bls	.L148
1717:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
1718:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       return HAL_ERROR;
 1632              		.loc 1 1718 14 view .LVU379
 1633 0028 0120     		movs	r0, #1
 1634 002a 00E0     		b	.L149
ARM GAS  /tmp/cccgiV6Y.s 			page 80


 1635              	.L153:
1719:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
1720:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1721:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1722:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   return HAL_OK;
 1636              		.loc 1 1722 10 view .LVU380
 1637 002c 0020     		movs	r0, #0
 1638              	.L149:
1723:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 1639              		.loc 1 1723 1 view .LVU381
 1640 002e 10BD     		pop	{r4, pc}
 1641              	.LVL91:
 1642              	.L155:
 1643              		.loc 1 1723 1 view .LVU382
 1644              		.align	2
 1645              	.L154:
 1646 0030 00480258 		.word	1476544512
 1647              		.cfi_endproc
 1648              	.LFE170:
 1650              		.section	.text.HAL_PWREx_EnableUSBVoltageDetector,"ax",%progbits
 1651              		.align	1
 1652              		.global	HAL_PWREx_EnableUSBVoltageDetector
 1653              		.syntax unified
 1654              		.thumb
 1655              		.thumb_func
 1657              	HAL_PWREx_EnableUSBVoltageDetector:
 1658              	.LFB171:
1724:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1725:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1726:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Enable the USB voltage level detector.
1727:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
1728:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1729:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_EnableUSBVoltageDetector (void)
1730:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 1659              		.loc 1 1730 1 is_stmt 1 view -0
 1660              		.cfi_startproc
 1661              		@ args = 0, pretend = 0, frame = 0
 1662              		@ frame_needed = 0, uses_anonymous_args = 0
 1663              		@ link register save eliminated.
1731:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Enable the USB voltage detector */
1732:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 1664              		.loc 1 1732 3 view .LVU384
 1665 0000 024A     		ldr	r2, .L157
 1666 0002 D368     		ldr	r3, [r2, #12]
 1667 0004 43F08073 		orr	r3, r3, #16777216
 1668 0008 D360     		str	r3, [r2, #12]
1733:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 1669              		.loc 1 1733 1 is_stmt 0 view .LVU385
 1670 000a 7047     		bx	lr
 1671              	.L158:
 1672              		.align	2
 1673              	.L157:
 1674 000c 00480258 		.word	1476544512
 1675              		.cfi_endproc
 1676              	.LFE171:
 1678              		.section	.text.HAL_PWREx_DisableUSBVoltageDetector,"ax",%progbits
 1679              		.align	1
ARM GAS  /tmp/cccgiV6Y.s 			page 81


 1680              		.global	HAL_PWREx_DisableUSBVoltageDetector
 1681              		.syntax unified
 1682              		.thumb
 1683              		.thumb_func
 1685              	HAL_PWREx_DisableUSBVoltageDetector:
 1686              	.LFB172:
1734:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1735:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1736:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Disable the USB voltage level detector.
1737:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
1738:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1739:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_DisableUSBVoltageDetector (void)
1740:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 1687              		.loc 1 1740 1 is_stmt 1 view -0
 1688              		.cfi_startproc
 1689              		@ args = 0, pretend = 0, frame = 0
 1690              		@ frame_needed = 0, uses_anonymous_args = 0
 1691              		@ link register save eliminated.
1741:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Disable the USB voltage detector */
1742:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   CLEAR_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 1692              		.loc 1 1742 3 view .LVU387
 1693 0000 024A     		ldr	r2, .L160
 1694 0002 D368     		ldr	r3, [r2, #12]
 1695 0004 23F08073 		bic	r3, r3, #16777216
 1696 0008 D360     		str	r3, [r2, #12]
1743:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 1697              		.loc 1 1743 1 is_stmt 0 view .LVU388
 1698 000a 7047     		bx	lr
 1699              	.L161:
 1700              		.align	2
 1701              	.L160:
 1702 000c 00480258 		.word	1476544512
 1703              		.cfi_endproc
 1704              	.LFE172:
 1706              		.section	.text.HAL_PWREx_EnableBatteryCharging,"ax",%progbits
 1707              		.align	1
 1708              		.global	HAL_PWREx_EnableBatteryCharging
 1709              		.syntax unified
 1710              		.thumb
 1711              		.thumb_func
 1713              	HAL_PWREx_EnableBatteryCharging:
 1714              	.LVL92:
 1715              	.LFB173:
1744:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1745:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1746:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Enable the Battery charging.
1747:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   When VDD is present, charge the external battery through an internal
1748:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         resistor.
1749:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  ResistorValue : Specifies the charging resistor.
1750:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *          This parameter can be one of the following values :
1751:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_BATTERY_CHARGING_RESISTOR_5 : 5 KOhm resistor.
1752:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *            @arg PWR_BATTERY_CHARGING_RESISTOR_1_5 : 1.5 KOhm resistor.
1753:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
1754:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1755:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_EnableBatteryCharging (uint32_t ResistorValue)
1756:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 1716              		.loc 1 1756 1 is_stmt 1 view -0
ARM GAS  /tmp/cccgiV6Y.s 			page 82


 1717              		.cfi_startproc
 1718              		@ args = 0, pretend = 0, frame = 0
 1719              		@ frame_needed = 0, uses_anonymous_args = 0
 1720              		@ link register save eliminated.
1757:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the parameter */
1758:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_BATTERY_RESISTOR_SELECT (ResistorValue));
 1721              		.loc 1 1758 3 view .LVU390
1759:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1760:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Specify the charging resistor */
1761:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   MODIFY_REG (PWR->CR3, PWR_CR3_VBRS, ResistorValue);
 1722              		.loc 1 1761 3 view .LVU391
 1723 0000 054A     		ldr	r2, .L163
 1724 0002 D368     		ldr	r3, [r2, #12]
 1725 0004 23F40073 		bic	r3, r3, #512
 1726 0008 0343     		orrs	r3, r3, r0
 1727 000a D360     		str	r3, [r2, #12]
1762:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1763:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Enable the Battery charging */
1764:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   SET_BIT (PWR->CR3, PWR_CR3_VBE);
 1728              		.loc 1 1764 3 view .LVU392
 1729 000c D368     		ldr	r3, [r2, #12]
 1730 000e 43F48073 		orr	r3, r3, #256
 1731 0012 D360     		str	r3, [r2, #12]
1765:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 1732              		.loc 1 1765 1 is_stmt 0 view .LVU393
 1733 0014 7047     		bx	lr
 1734              	.L164:
 1735 0016 00BF     		.align	2
 1736              	.L163:
 1737 0018 00480258 		.word	1476544512
 1738              		.cfi_endproc
 1739              	.LFE173:
 1741              		.section	.text.HAL_PWREx_DisableBatteryCharging,"ax",%progbits
 1742              		.align	1
 1743              		.global	HAL_PWREx_DisableBatteryCharging
 1744              		.syntax unified
 1745              		.thumb
 1746              		.thumb_func
 1748              	HAL_PWREx_DisableBatteryCharging:
 1749              	.LFB174:
1766:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1767:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1768:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Disable the Battery charging.
1769:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
1770:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1771:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_DisableBatteryCharging (void)
1772:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 1750              		.loc 1 1772 1 is_stmt 1 view -0
 1751              		.cfi_startproc
 1752              		@ args = 0, pretend = 0, frame = 0
 1753              		@ frame_needed = 0, uses_anonymous_args = 0
 1754              		@ link register save eliminated.
1773:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Disable the Battery charging */
1774:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   CLEAR_BIT (PWR->CR3, PWR_CR3_VBE);
 1755              		.loc 1 1774 3 view .LVU395
 1756 0000 024A     		ldr	r2, .L166
 1757 0002 D368     		ldr	r3, [r2, #12]
ARM GAS  /tmp/cccgiV6Y.s 			page 83


 1758 0004 23F48073 		bic	r3, r3, #256
 1759 0008 D360     		str	r3, [r2, #12]
1775:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 1760              		.loc 1 1775 1 is_stmt 0 view .LVU396
 1761 000a 7047     		bx	lr
 1762              	.L167:
 1763              		.align	2
 1764              	.L166:
 1765 000c 00480258 		.word	1476544512
 1766              		.cfi_endproc
 1767              	.LFE174:
 1769              		.section	.text.HAL_PWREx_EnableMonitoring,"ax",%progbits
 1770              		.align	1
 1771              		.global	HAL_PWREx_EnableMonitoring
 1772              		.syntax unified
 1773              		.thumb
 1774              		.thumb_func
 1776              	HAL_PWREx_EnableMonitoring:
 1777              	.LFB175:
1776:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1777:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (PWR_CR1_BOOSTE)
1778:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1779:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Enable the booster to guarantee the analog switch AC performance when
1780:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *        the VDD supply voltage is below 2V7.
1781:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   The VDD supply voltage can be monitored through the PVD and the PLS
1782:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         field bits.
1783:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
1784:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1785:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_EnableAnalogBooster (void)
1786:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
1787:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Enable the Analog voltage */
1788:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   SET_BIT (PWR->CR1, PWR_CR1_AVD_READY);
1789:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1790:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Enable VDDA booster */
1791:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   SET_BIT (PWR->CR1, PWR_CR1_BOOSTE);
1792:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
1793:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1794:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1795:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Disable the analog booster.
1796:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
1797:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1798:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_DisableAnalogBooster (void)
1799:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
1800:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Disable VDDA booster */
1801:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   CLEAR_BIT (PWR->CR1, PWR_CR1_BOOSTE);
1802:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1803:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Disable the Analog voltage */
1804:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   CLEAR_BIT (PWR->CR1, PWR_CR1_AVD_READY);
1805:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
1806:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (PWR_CR1_BOOSTE) */
1807:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1808:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @}
1809:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1810:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1811:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /** @defgroup PWREx_Exported_Functions_Group4 Power Monitoring functions
1812:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief    Power Monitoring functions
1813:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *
ARM GAS  /tmp/cccgiV6Y.s 			page 84


1814:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** @verbatim
1815:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****  ===============================================================================
1816:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****                  ##### Power Monitoring functions #####
1817:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****  ===============================================================================
1818:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1819:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     *** VBAT and Temperature supervision ***
1820:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     ========================================
1821:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     [..]
1822:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) The VBAT battery voltage supply can be monitored by comparing it with
1823:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           two threshold levels: VBAThigh and VBATlow. VBATH flag and VBATL flags
1824:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           in the PWR control register 2 (PWR_CR2), indicate if VBAT is higher or
1825:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           lower than the threshold.
1826:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) The temperature can be monitored by comparing it with two threshold
1827:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           levels, TEMPhigh and TEMPlow. TEMPH and TEMPL flags, in the PWR
1828:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           control register 2 (PWR_CR2), indicate whether the device temperature
1829:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           is higher or lower than the threshold.
1830:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) The VBAT and the temperature monitoring is enabled by
1831:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           HAL_PWREx_EnableMonitoring() function and disabled by
1832:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           HAL_PWREx_DisableMonitoring() function.
1833:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) The HAL_PWREx_GetVBATLevel() function returns the VBAT level which can
1834:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           be : PWR_VBAT_BELOW_LOW_THRESHOLD or PWR_VBAT_ABOVE_HIGH_THRESHOLD or
1835:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           PWR_VBAT_BETWEEN_HIGH_LOW_THRESHOLD.
1836:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) The HAL_PWREx_GetTemperatureLevel() function returns the Temperature
1837:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           level which can be :
1838:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           PWR_TEMP_BELOW_LOW_THRESHOLD or PWR_TEMP_ABOVE_HIGH_THRESHOLD or
1839:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           PWR_TEMP_BETWEEN_HIGH_LOW_THRESHOLD.
1840:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1841:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     *** AVD configuration ***
1842:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     =========================
1843:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     [..]
1844:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) The AVD is used to monitor the VDDA power supply by comparing it to a
1845:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           threshold selected by the AVD Level (ALS[3:0] bits in the PWR_CR1
1846:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           register).
1847:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) A AVDO flag is available to indicate if VDDA is higher or lower
1848:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           than the AVD threshold. This event is internally connected to the EXTI
1849:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           line 16 to generate an interrupt if enabled.
1850:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****           It is configurable through __HAL_PWR_AVD_EXTI_ENABLE_IT() macro.
1851:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       (+) The AVD is stopped in System Standby mode.
1852:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1853:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** @endverbatim
1854:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @{
1855:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1856:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1857:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1858:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Enable the VBAT and temperature monitoring.
1859:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval HAL status.
1860:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1861:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_EnableMonitoring (void)
1862:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 1778              		.loc 1 1862 1 is_stmt 1 view -0
 1779              		.cfi_startproc
 1780              		@ args = 0, pretend = 0, frame = 0
 1781              		@ frame_needed = 0, uses_anonymous_args = 0
 1782              		@ link register save eliminated.
1863:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Enable the VBAT and Temperature monitoring */
1864:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   SET_BIT (PWR->CR2, PWR_CR2_MONEN);
 1783              		.loc 1 1864 3 view .LVU398
ARM GAS  /tmp/cccgiV6Y.s 			page 85


 1784 0000 024A     		ldr	r2, .L169
 1785 0002 9368     		ldr	r3, [r2, #8]
 1786 0004 43F01003 		orr	r3, r3, #16
 1787 0008 9360     		str	r3, [r2, #8]
1865:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 1788              		.loc 1 1865 1 is_stmt 0 view .LVU399
 1789 000a 7047     		bx	lr
 1790              	.L170:
 1791              		.align	2
 1792              	.L169:
 1793 000c 00480258 		.word	1476544512
 1794              		.cfi_endproc
 1795              	.LFE175:
 1797              		.section	.text.HAL_PWREx_DisableMonitoring,"ax",%progbits
 1798              		.align	1
 1799              		.global	HAL_PWREx_DisableMonitoring
 1800              		.syntax unified
 1801              		.thumb
 1802              		.thumb_func
 1804              	HAL_PWREx_DisableMonitoring:
 1805              	.LFB176:
1866:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1867:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1868:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Disable the VBAT and temperature monitoring.
1869:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval HAL status.
1870:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1871:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_DisableMonitoring (void)
1872:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 1806              		.loc 1 1872 1 is_stmt 1 view -0
 1807              		.cfi_startproc
 1808              		@ args = 0, pretend = 0, frame = 0
 1809              		@ frame_needed = 0, uses_anonymous_args = 0
 1810              		@ link register save eliminated.
1873:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Disable the VBAT and Temperature monitoring */
1874:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   CLEAR_BIT (PWR->CR2, PWR_CR2_MONEN);
 1811              		.loc 1 1874 3 view .LVU401
 1812 0000 024A     		ldr	r2, .L172
 1813 0002 9368     		ldr	r3, [r2, #8]
 1814 0004 23F01003 		bic	r3, r3, #16
 1815 0008 9360     		str	r3, [r2, #8]
1875:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 1816              		.loc 1 1875 1 is_stmt 0 view .LVU402
 1817 000a 7047     		bx	lr
 1818              	.L173:
 1819              		.align	2
 1820              	.L172:
 1821 000c 00480258 		.word	1476544512
 1822              		.cfi_endproc
 1823              	.LFE176:
 1825              		.section	.text.HAL_PWREx_GetTemperatureLevel,"ax",%progbits
 1826              		.align	1
 1827              		.global	HAL_PWREx_GetTemperatureLevel
 1828              		.syntax unified
 1829              		.thumb
 1830              		.thumb_func
 1832              	HAL_PWREx_GetTemperatureLevel:
 1833              	.LFB177:
ARM GAS  /tmp/cccgiV6Y.s 			page 86


1876:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1877:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1878:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Indicate whether the junction temperature is between, above or below
1879:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *        the thresholds.
1880:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval Temperature level.
1881:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1882:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** uint32_t HAL_PWREx_GetTemperatureLevel (void)
1883:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 1834              		.loc 1 1883 1 is_stmt 1 view -0
 1835              		.cfi_startproc
 1836              		@ args = 0, pretend = 0, frame = 0
 1837              		@ frame_needed = 0, uses_anonymous_args = 0
 1838              		@ link register save eliminated.
1884:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   uint32_t tempLevel, regValue;
 1839              		.loc 1 1884 3 view .LVU404
1885:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1886:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Read the temperature flags */
1887:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   regValue = READ_BIT (PWR->CR2, (PWR_CR2_TEMPH | PWR_CR2_TEMPL));
 1840              		.loc 1 1887 3 view .LVU405
 1841              		.loc 1 1887 14 is_stmt 0 view .LVU406
 1842 0000 054B     		ldr	r3, .L177
 1843 0002 9868     		ldr	r0, [r3, #8]
 1844              		.loc 1 1887 12 view .LVU407
 1845 0004 00F44000 		and	r0, r0, #12582912
 1846              	.LVL93:
1888:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1889:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check if the temperature is below the threshold */
1890:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if (regValue == PWR_CR2_TEMPL)
 1847              		.loc 1 1890 3 is_stmt 1 view .LVU408
 1848              		.loc 1 1890 6 is_stmt 0 view .LVU409
 1849 0008 B0F5800F 		cmp	r0, #4194304
 1850 000c 03D0     		beq	.L174
1891:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1892:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     tempLevel = PWR_TEMP_BELOW_LOW_THRESHOLD;
1893:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1894:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check if the temperature is above the threshold */
1895:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   else if (regValue == PWR_CR2_TEMPH)
 1851              		.loc 1 1895 8 is_stmt 1 view .LVU410
 1852              		.loc 1 1895 11 is_stmt 0 view .LVU411
 1853 000e B0F5000F 		cmp	r0, #8388608
 1854 0012 00D0     		beq	.L174
1896:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1897:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     tempLevel = PWR_TEMP_ABOVE_HIGH_THRESHOLD;
1898:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1899:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* The temperature is between the thresholds */
1900:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   else
1901:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1902:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     tempLevel = PWR_TEMP_BETWEEN_HIGH_LOW_THRESHOLD;
 1855              		.loc 1 1902 15 view .LVU412
 1856 0014 0020     		movs	r0, #0
 1857              	.LVL94:
1903:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1904:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1905:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   return tempLevel;
 1858              		.loc 1 1905 3 is_stmt 1 view .LVU413
 1859              	.L174:
1906:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
ARM GAS  /tmp/cccgiV6Y.s 			page 87


 1860              		.loc 1 1906 1 is_stmt 0 view .LVU414
 1861 0016 7047     		bx	lr
 1862              	.L178:
 1863              		.align	2
 1864              	.L177:
 1865 0018 00480258 		.word	1476544512
 1866              		.cfi_endproc
 1867              	.LFE177:
 1869              		.section	.text.HAL_PWREx_GetVBATLevel,"ax",%progbits
 1870              		.align	1
 1871              		.global	HAL_PWREx_GetVBATLevel
 1872              		.syntax unified
 1873              		.thumb
 1874              		.thumb_func
 1876              	HAL_PWREx_GetVBATLevel:
 1877              	.LFB178:
1907:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1908:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1909:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Indicate whether the Battery voltage level is between, above or below
1910:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *        the thresholds.
1911:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval VBAT level.
1912:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1913:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** uint32_t HAL_PWREx_GetVBATLevel (void)
1914:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 1878              		.loc 1 1914 1 is_stmt 1 view -0
 1879              		.cfi_startproc
 1880              		@ args = 0, pretend = 0, frame = 0
 1881              		@ frame_needed = 0, uses_anonymous_args = 0
 1882              		@ link register save eliminated.
1915:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   uint32_t VBATLevel, regValue;
 1883              		.loc 1 1915 3 view .LVU416
1916:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1917:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Read the VBAT flags */
1918:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   regValue = READ_BIT (PWR->CR2, (PWR_CR2_VBATH | PWR_CR2_VBATL));
 1884              		.loc 1 1918 3 view .LVU417
 1885              		.loc 1 1918 14 is_stmt 0 view .LVU418
 1886 0000 054B     		ldr	r3, .L182
 1887 0002 9868     		ldr	r0, [r3, #8]
 1888              		.loc 1 1918 12 view .LVU419
 1889 0004 00F44010 		and	r0, r0, #3145728
 1890              	.LVL95:
1919:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1920:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check if the VBAT is below the threshold */
1921:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if (regValue == PWR_CR2_VBATL)
 1891              		.loc 1 1921 3 is_stmt 1 view .LVU420
 1892              		.loc 1 1921 6 is_stmt 0 view .LVU421
 1893 0008 B0F5801F 		cmp	r0, #1048576
 1894 000c 03D0     		beq	.L179
1922:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1923:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     VBATLevel = PWR_VBAT_BELOW_LOW_THRESHOLD;
1924:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1925:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check if the VBAT is above the threshold */
1926:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   else if (regValue == PWR_CR2_VBATH)
 1895              		.loc 1 1926 8 is_stmt 1 view .LVU422
 1896              		.loc 1 1926 11 is_stmt 0 view .LVU423
 1897 000e B0F5001F 		cmp	r0, #2097152
 1898 0012 00D0     		beq	.L179
ARM GAS  /tmp/cccgiV6Y.s 			page 88


1927:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1928:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     VBATLevel = PWR_VBAT_ABOVE_HIGH_THRESHOLD;
1929:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1930:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* The VBAT is between the thresholds */
1931:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   else
1932:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1933:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     VBATLevel = PWR_VBAT_BETWEEN_HIGH_LOW_THRESHOLD;
 1899              		.loc 1 1933 15 view .LVU424
 1900 0014 0020     		movs	r0, #0
 1901              	.LVL96:
1934:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1935:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1936:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   return VBATLevel;
 1902              		.loc 1 1936 3 is_stmt 1 view .LVU425
 1903              	.L179:
1937:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 1904              		.loc 1 1937 1 is_stmt 0 view .LVU426
 1905 0016 7047     		bx	lr
 1906              	.L183:
 1907              		.align	2
 1908              	.L182:
 1909 0018 00480258 		.word	1476544512
 1910              		.cfi_endproc
 1911              	.LFE178:
 1913              		.section	.text.HAL_PWREx_ConfigAVD,"ax",%progbits
 1914              		.align	1
 1915              		.global	HAL_PWREx_ConfigAVD
 1916              		.syntax unified
 1917              		.thumb
 1918              		.thumb_func
 1920              	HAL_PWREx_ConfigAVD:
 1921              	.LVL97:
 1922              	.LFB179:
1938:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1939:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (PWR_CSR1_MMCVDO)
1940:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1941:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Get the VDDMMC voltage level.
1942:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval The VDDMMC voltage level.
1943:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1944:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** PWREx_MMC_VoltageLevel HAL_PWREx_GetMMCVoltage (void)
1945:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
1946:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   PWREx_MMC_VoltageLevel mmc_voltage;
1947:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1948:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check voltage detector output on VDDMMC value */
1949:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if ((PWR->CSR1 & PWR_CSR1_MMCVDO_Msk) == 0U)
1950:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1951:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     mmc_voltage = PWR_MMC_VOLTAGE_BELOW_1V2;
1952:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1953:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   else
1954:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1955:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     mmc_voltage = PWR_MMC_VOLTAGE_EQUAL_ABOVE_1V2;
1956:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
1957:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1958:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   return mmc_voltage;
1959:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
1960:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (PWR_CSR1_MMCVDO) */
1961:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
ARM GAS  /tmp/cccgiV6Y.s 			page 89


1962:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
1963:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief  Configure the event mode and the voltage threshold detected by the
1964:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         Analog Voltage Detector (AVD).
1965:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @param  sConfigAVD : Pointer to an PWREx_AVDTypeDef structure that contains
1966:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *                      the configuration information for the AVD.
1967:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   Refer to the electrical characteristics of your device datasheet for
1968:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         more details about the voltage threshold corresponding to each
1969:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         detection level.
1970:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   For dual core devices, please ensure to configure the EXTI lines for
1971:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         the different Cortex-Mx through PWR_Exported_Macro provided by this
1972:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         driver. All combination are allowed: wake up only Cortex-M7, wake up
1973:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   *         only Cortex-M4 and wake up Cortex-M7 and Cortex-M4.
1974:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
1975:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
1976:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_ConfigAVD (PWREx_AVDTypeDef *sConfigAVD)
1977:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 1923              		.loc 1 1977 1 is_stmt 1 view -0
 1924              		.cfi_startproc
 1925              		@ args = 0, pretend = 0, frame = 0
 1926              		@ frame_needed = 0, uses_anonymous_args = 0
 1927              		@ link register save eliminated.
1978:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check the parameters */
1979:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_AVD_LEVEL (sConfigAVD->AVDLevel));
 1928              		.loc 1 1979 3 view .LVU428
1980:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   assert_param (IS_PWR_AVD_MODE (sConfigAVD->Mode));
 1929              		.loc 1 1980 3 view .LVU429
1981:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1982:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Set the ALS[18:17] bits according to AVDLevel value */
1983:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   MODIFY_REG (PWR->CR1, PWR_CR1_ALS, sConfigAVD->AVDLevel);
 1930              		.loc 1 1983 3 view .LVU430
 1931 0000 244A     		ldr	r2, .L189
 1932 0002 1368     		ldr	r3, [r2]
 1933 0004 23F4C023 		bic	r3, r3, #393216
 1934 0008 0168     		ldr	r1, [r0]
 1935 000a 0B43     		orrs	r3, r3, r1
 1936 000c 1360     		str	r3, [r2]
1984:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1985:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Clear any previous config */
1986:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if !defined (DUAL_CORE)
1987:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   __HAL_PWR_AVD_EXTI_DISABLE_EVENT ();
 1937              		.loc 1 1987 3 view .LVU431
 1938 000e 4FF0B043 		mov	r3, #1476395008
 1939 0012 D3F88420 		ldr	r2, [r3, #132]
 1940 0016 22F48032 		bic	r2, r2, #65536
 1941 001a C3F88420 		str	r2, [r3, #132]
1988:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   __HAL_PWR_AVD_EXTI_DISABLE_IT ();
 1942              		.loc 1 1988 3 view .LVU432
 1943 001e D3F88020 		ldr	r2, [r3, #128]
 1944 0022 22F48032 		bic	r2, r2, #65536
 1945 0026 C3F88020 		str	r2, [r3, #128]
1989:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* !defined (DUAL_CORE) */
1990:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1991:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   __HAL_PWR_AVD_EXTI_DISABLE_RISING_EDGE ();
 1946              		.loc 1 1991 3 view .LVU433
 1947 002a 1A68     		ldr	r2, [r3]
 1948 002c 22F48032 		bic	r2, r2, #65536
 1949 0030 1A60     		str	r2, [r3]
ARM GAS  /tmp/cccgiV6Y.s 			page 90


1992:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   __HAL_PWR_AVD_EXTI_DISABLE_FALLING_EDGE ();
 1950              		.loc 1 1992 3 view .LVU434
 1951 0032 5A68     		ldr	r2, [r3, #4]
 1952 0034 22F48032 		bic	r2, r2, #65536
 1953 0038 5A60     		str	r2, [r3, #4]
1993:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
1994:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if !defined (DUAL_CORE)
1995:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Configure the interrupt mode */
1996:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if ((sConfigAVD->Mode & AVD_MODE_IT) == AVD_MODE_IT)
 1954              		.loc 1 1996 3 view .LVU435
 1955              		.loc 1 1996 18 is_stmt 0 view .LVU436
 1956 003a 4368     		ldr	r3, [r0, #4]
 1957              		.loc 1 1996 6 view .LVU437
 1958 003c 13F4803F 		tst	r3, #65536
 1959 0040 07D0     		beq	.L185
1997:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
1998:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     __HAL_PWR_AVD_EXTI_ENABLE_IT ();
 1960              		.loc 1 1998 5 is_stmt 1 view .LVU438
 1961 0042 4FF0B042 		mov	r2, #1476395008
 1962 0046 D2F88030 		ldr	r3, [r2, #128]
 1963 004a 43F48033 		orr	r3, r3, #65536
 1964 004e C2F88030 		str	r3, [r2, #128]
 1965              	.L185:
1999:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
2000:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
2001:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Configure the event mode */
2002:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if ((sConfigAVD->Mode & AVD_MODE_EVT) == AVD_MODE_EVT)
 1966              		.loc 1 2002 3 view .LVU439
 1967              		.loc 1 2002 18 is_stmt 0 view .LVU440
 1968 0052 4368     		ldr	r3, [r0, #4]
 1969              		.loc 1 2002 6 view .LVU441
 1970 0054 13F4003F 		tst	r3, #131072
 1971 0058 07D0     		beq	.L186
2003:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
2004:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     __HAL_PWR_AVD_EXTI_ENABLE_EVENT ();
 1972              		.loc 1 2004 5 is_stmt 1 view .LVU442
 1973 005a 4FF0B042 		mov	r2, #1476395008
 1974 005e D2F88430 		ldr	r3, [r2, #132]
 1975 0062 43F48033 		orr	r3, r3, #65536
 1976 0066 C2F88430 		str	r3, [r2, #132]
 1977              	.L186:
2005:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
2006:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* !defined (DUAL_CORE) */
2007:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
2008:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Rising edge configuration */
2009:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if ((sConfigAVD->Mode & AVD_RISING_EDGE) == AVD_RISING_EDGE)
 1978              		.loc 1 2009 3 view .LVU443
 1979              		.loc 1 2009 18 is_stmt 0 view .LVU444
 1980 006a 4368     		ldr	r3, [r0, #4]
 1981              		.loc 1 2009 6 view .LVU445
 1982 006c 13F0010F 		tst	r3, #1
 1983 0070 05D0     		beq	.L187
2010:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
2011:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     __HAL_PWR_AVD_EXTI_ENABLE_RISING_EDGE ();
 1984              		.loc 1 2011 5 is_stmt 1 view .LVU446
 1985 0072 4FF0B042 		mov	r2, #1476395008
 1986 0076 1368     		ldr	r3, [r2]
ARM GAS  /tmp/cccgiV6Y.s 			page 91


 1987 0078 43F48033 		orr	r3, r3, #65536
 1988 007c 1360     		str	r3, [r2]
 1989              	.L187:
2012:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
2013:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
2014:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Falling edge configuration */
2015:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if ((sConfigAVD->Mode & AVD_FALLING_EDGE) == AVD_FALLING_EDGE)
 1990              		.loc 1 2015 3 view .LVU447
 1991              		.loc 1 2015 18 is_stmt 0 view .LVU448
 1992 007e 4368     		ldr	r3, [r0, #4]
 1993              		.loc 1 2015 6 view .LVU449
 1994 0080 13F0020F 		tst	r3, #2
 1995 0084 05D0     		beq	.L184
2016:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
2017:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     __HAL_PWR_AVD_EXTI_ENABLE_FALLING_EDGE ();
 1996              		.loc 1 2017 5 is_stmt 1 view .LVU450
 1997 0086 4FF0B042 		mov	r2, #1476395008
 1998 008a 5368     		ldr	r3, [r2, #4]
 1999 008c 43F48033 		orr	r3, r3, #65536
 2000 0090 5360     		str	r3, [r2, #4]
 2001              	.L184:
2018:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
2019:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 2002              		.loc 1 2019 1 is_stmt 0 view .LVU451
 2003 0092 7047     		bx	lr
 2004              	.L190:
 2005              		.align	2
 2006              	.L189:
 2007 0094 00480258 		.word	1476544512
 2008              		.cfi_endproc
 2009              	.LFE179:
 2011              		.section	.text.HAL_PWREx_EnableAVD,"ax",%progbits
 2012              		.align	1
 2013              		.global	HAL_PWREx_EnableAVD
 2014              		.syntax unified
 2015              		.thumb
 2016              		.thumb_func
 2018              	HAL_PWREx_EnableAVD:
 2019              	.LFB180:
2020:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
2021:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
2022:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Enable the Analog Voltage Detector (AVD).
2023:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
2024:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
2025:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_EnableAVD (void)
2026:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 2020              		.loc 1 2026 1 is_stmt 1 view -0
 2021              		.cfi_startproc
 2022              		@ args = 0, pretend = 0, frame = 0
 2023              		@ frame_needed = 0, uses_anonymous_args = 0
 2024              		@ link register save eliminated.
2027:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Enable the Analog Voltage Detector */
2028:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   SET_BIT (PWR->CR1, PWR_CR1_AVDEN);
 2025              		.loc 1 2028 3 view .LVU453
 2026 0000 024A     		ldr	r2, .L192
 2027 0002 1368     		ldr	r3, [r2]
 2028 0004 43F48033 		orr	r3, r3, #65536
ARM GAS  /tmp/cccgiV6Y.s 			page 92


 2029 0008 1360     		str	r3, [r2]
2029:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 2030              		.loc 1 2029 1 is_stmt 0 view .LVU454
 2031 000a 7047     		bx	lr
 2032              	.L193:
 2033              		.align	2
 2034              	.L192:
 2035 000c 00480258 		.word	1476544512
 2036              		.cfi_endproc
 2037              	.LFE180:
 2039              		.section	.text.HAL_PWREx_DisableAVD,"ax",%progbits
 2040              		.align	1
 2041              		.global	HAL_PWREx_DisableAVD
 2042              		.syntax unified
 2043              		.thumb
 2044              		.thumb_func
 2046              	HAL_PWREx_DisableAVD:
 2047              	.LFB181:
2030:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
2031:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
2032:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief Disable the Analog Voltage Detector(AVD).
2033:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
2034:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
2035:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_DisableAVD (void)
2036:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 2048              		.loc 1 2036 1 is_stmt 1 view -0
 2049              		.cfi_startproc
 2050              		@ args = 0, pretend = 0, frame = 0
 2051              		@ frame_needed = 0, uses_anonymous_args = 0
 2052              		@ link register save eliminated.
2037:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Disable the Analog Voltage Detector */
2038:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   CLEAR_BIT (PWR->CR1, PWR_CR1_AVDEN);
 2053              		.loc 1 2038 3 view .LVU456
 2054 0000 024A     		ldr	r2, .L195
 2055 0002 1368     		ldr	r3, [r2]
 2056 0004 23F48033 		bic	r3, r3, #65536
 2057 0008 1360     		str	r3, [r2]
2039:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 2058              		.loc 1 2039 1 is_stmt 0 view .LVU457
 2059 000a 7047     		bx	lr
 2060              	.L196:
 2061              		.align	2
 2062              	.L195:
 2063 000c 00480258 		.word	1476544512
 2064              		.cfi_endproc
 2065              	.LFE181:
 2067              		.section	.text.HAL_PWREx_AVDCallback,"ax",%progbits
 2068              		.align	1
 2069              		.weak	HAL_PWREx_AVDCallback
 2070              		.syntax unified
 2071              		.thumb
 2072              		.thumb_func
 2074              	HAL_PWREx_AVDCallback:
 2075              	.LFB183:
2040:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
2041:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
2042:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief  This function handles the PWR PVD/AVD interrupt request.
ARM GAS  /tmp/cccgiV6Y.s 			page 93


2043:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @note   This API should be called under the PVD_AVD_IRQHandler().
2044:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None
2045:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
2046:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** void HAL_PWREx_PVD_AVD_IRQHandler (void)
2047:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
2048:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check if the Programmable Voltage Detector is enabled (PVD) */
2049:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if (READ_BIT (PWR->CR1, PWR_CR1_PVDEN) != 0U)
2050:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
2051:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (DUAL_CORE)
2052:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     if (HAL_GetCurrentCPUID () == CM7_CPUID)
2053:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (DUAL_CORE) */
2054:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
2055:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       /* Check PWR D1/CD EXTI flag */
2056:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       if (__HAL_PWR_PVD_EXTI_GET_FLAG () != 0U)
2057:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       {
2058:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         /* PWR PVD interrupt user callback */
2059:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         HAL_PWR_PVDCallback ();
2060:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
2061:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         /* Clear PWR EXTI D1/CD pending bit */
2062:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         __HAL_PWR_PVD_EXTI_CLEAR_FLAG ();
2063:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       }
2064:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
2065:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (DUAL_CORE)
2066:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     else
2067:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
2068:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       /* Check PWR EXTI D2 flag */
2069:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       if (__HAL_PWR_PVD_EXTID2_GET_FLAG () != 0U)
2070:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       {
2071:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         /* PWR PVD interrupt user callback */
2072:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         HAL_PWR_PVDCallback ();
2073:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
2074:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         /* Clear PWR EXTI D2 pending bit */
2075:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         __HAL_PWR_PVD_EXTID2_CLEAR_FLAG();
2076:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       }
2077:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
2078:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (DUAL_CORE) */
2079:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
2080:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
2081:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check if the Analog Voltage Detector is enabled (AVD) */
2082:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   if (READ_BIT (PWR->CR1, PWR_CR1_AVDEN) != 0U)
2083:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
2084:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (DUAL_CORE)
2085:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     if (HAL_GetCurrentCPUID () == CM7_CPUID)
2086:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (DUAL_CORE) */
2087:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
2088:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       /* Check PWR EXTI D1/CD flag */
2089:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       if (__HAL_PWR_AVD_EXTI_GET_FLAG () != 0U)
2090:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       {
2091:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         /* PWR AVD interrupt user callback */
2092:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         HAL_PWREx_AVDCallback ();
2093:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
2094:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         /* Clear PWR EXTI D1/CD pending bit */
2095:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         __HAL_PWR_AVD_EXTI_CLEAR_FLAG ();
2096:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       }
2097:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
2098:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #if defined (DUAL_CORE)
2099:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     else
ARM GAS  /tmp/cccgiV6Y.s 			page 94


2100:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     {
2101:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       /* Check PWR EXTI D2 flag */
2102:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       if (__HAL_PWR_AVD_EXTID2_GET_FLAG () != 0U)
2103:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       {
2104:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         /* PWR AVD interrupt user callback */
2105:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         HAL_PWREx_AVDCallback ();
2106:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
2107:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         /* Clear PWR EXTI D2 pending bit */
2108:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****         __HAL_PWR_AVD_EXTID2_CLEAR_FLAG ();
2109:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       }
2110:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****     }
2111:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** #endif /* defined (DUAL_CORE) */
2112:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   }
2113:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
2114:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
2115:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** /**
2116:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @brief PWR AVD interrupt callback.
2117:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   * @retval None.
2118:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
2119:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** __weak void HAL_PWREx_AVDCallback (void)
2120:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** {
 2076              		.loc 1 2120 1 is_stmt 1 view -0
 2077              		.cfi_startproc
 2078              		@ args = 0, pretend = 0, frame = 0
 2079              		@ frame_needed = 0, uses_anonymous_args = 0
 2080              		@ link register save eliminated.
2121:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* NOTE : This function should not be modified, when the callback is needed,
2122:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****             the HAL_PWR_AVDCallback can be implemented in the user file
2123:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   */
2124:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** }
 2081              		.loc 1 2124 1 view .LVU459
 2082 0000 7047     		bx	lr
 2083              		.cfi_endproc
 2084              	.LFE183:
 2086              		.section	.text.HAL_PWREx_PVD_AVD_IRQHandler,"ax",%progbits
 2087              		.align	1
 2088              		.global	HAL_PWREx_PVD_AVD_IRQHandler
 2089              		.syntax unified
 2090              		.thumb
 2091              		.thumb_func
 2093              	HAL_PWREx_PVD_AVD_IRQHandler:
 2094              	.LFB182:
2047:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   /* Check if the Programmable Voltage Detector is enabled (PVD) */
 2095              		.loc 1 2047 1 view -0
 2096              		.cfi_startproc
 2097              		@ args = 0, pretend = 0, frame = 0
 2098              		@ frame_needed = 0, uses_anonymous_args = 0
 2099 0000 08B5     		push	{r3, lr}
 2100              	.LCFI14:
 2101              		.cfi_def_cfa_offset 8
 2102              		.cfi_offset 3, -8
 2103              		.cfi_offset 14, -4
2049:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 2104              		.loc 1 2049 3 view .LVU461
2049:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 2105              		.loc 1 2049 7 is_stmt 0 view .LVU462
 2106 0002 174B     		ldr	r3, .L204
ARM GAS  /tmp/cccgiV6Y.s 			page 95


 2107 0004 1B68     		ldr	r3, [r3]
2049:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 2108              		.loc 1 2049 6 view .LVU463
 2109 0006 13F0100F 		tst	r3, #16
 2110 000a 06D0     		beq	.L199
2056:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       {
 2111              		.loc 1 2056 7 is_stmt 1 view .LVU464
2056:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       {
 2112              		.loc 1 2056 11 is_stmt 0 view .LVU465
 2113 000c 4FF0B043 		mov	r3, #1476395008
 2114 0010 D3F88830 		ldr	r3, [r3, #136]
2056:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       {
 2115              		.loc 1 2056 10 view .LVU466
 2116 0014 13F4803F 		tst	r3, #65536
 2117 0018 0CD1     		bne	.L202
 2118              	.L199:
2082:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 2119              		.loc 1 2082 3 is_stmt 1 view .LVU467
2082:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 2120              		.loc 1 2082 7 is_stmt 0 view .LVU468
 2121 001a 114B     		ldr	r3, .L204
 2122 001c 1B68     		ldr	r3, [r3]
2082:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****   {
 2123              		.loc 1 2082 6 view .LVU469
 2124 001e 13F4803F 		tst	r3, #65536
 2125 0022 06D0     		beq	.L198
2089:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       {
 2126              		.loc 1 2089 7 is_stmt 1 view .LVU470
2089:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       {
 2127              		.loc 1 2089 11 is_stmt 0 view .LVU471
 2128 0024 4FF0B043 		mov	r3, #1476395008
 2129 0028 D3F88830 		ldr	r3, [r3, #136]
2089:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       {
 2130              		.loc 1 2089 10 view .LVU472
 2131 002c 13F4803F 		tst	r3, #65536
 2132 0030 0BD1     		bne	.L203
 2133              	.L198:
2113:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 2134              		.loc 1 2113 1 view .LVU473
 2135 0032 08BD     		pop	{r3, pc}
 2136              	.L202:
2059:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 2137              		.loc 1 2059 9 is_stmt 1 view .LVU474
 2138 0034 FFF7FEFF 		bl	HAL_PWR_PVDCallback
 2139              	.LVL98:
2062:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       }
 2140              		.loc 1 2062 9 view .LVU475
 2141 0038 4FF0B042 		mov	r2, #1476395008
 2142 003c D2F88830 		ldr	r3, [r2, #136]
 2143 0040 43F48033 		orr	r3, r3, #65536
 2144 0044 C2F88830 		str	r3, [r2, #136]
 2145 0048 E7E7     		b	.L199
 2146              	.L203:
2092:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 2147              		.loc 1 2092 9 view .LVU476
 2148 004a FFF7FEFF 		bl	HAL_PWREx_AVDCallback
 2149              	.LVL99:
ARM GAS  /tmp/cccgiV6Y.s 			page 96


2095:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c ****       }
 2150              		.loc 1 2095 9 view .LVU477
 2151 004e 4FF0B042 		mov	r2, #1476395008
 2152 0052 D2F88830 		ldr	r3, [r2, #136]
 2153 0056 43F48033 		orr	r3, r3, #65536
 2154 005a C2F88830 		str	r3, [r2, #136]
2113:lib/Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c **** 
 2155              		.loc 1 2113 1 is_stmt 0 view .LVU478
 2156 005e E8E7     		b	.L198
 2157              	.L205:
 2158              		.align	2
 2159              	.L204:
 2160 0060 00480258 		.word	1476544512
 2161              		.cfi_endproc
 2162              	.LFE182:
 2164              		.text
 2165              	.Letext0:
 2166              		.file 3 "/usr/arm-none-eabi/include/machine/_default_types.h"
 2167              		.file 4 "/usr/arm-none-eabi/include/sys/_stdint.h"
 2168              		.file 5 "lib/Drivers/CMSIS/Include/core_cm7.h"
 2169              		.file 6 "lib/Drivers/CMSIS/Device/ST/STM32H7xx/Include/stm32h750xx.h"
 2170              		.file 7 "lib/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_def.h"
 2171              		.file 8 "lib/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_pwr_ex.h"
 2172              		.file 9 "lib/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_pwr.h"
 2173              		.file 10 "lib/Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal.h"
ARM GAS  /tmp/cccgiV6Y.s 			page 97


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32h7xx_hal_pwr_ex.c
     /tmp/cccgiV6Y.s:20     .text.HAL_PWREx_ConfigSupply:0000000000000000 $t
     /tmp/cccgiV6Y.s:26     .text.HAL_PWREx_ConfigSupply:0000000000000000 HAL_PWREx_ConfigSupply
     /tmp/cccgiV6Y.s:118    .text.HAL_PWREx_ConfigSupply:0000000000000050 $d
     /tmp/cccgiV6Y.s:123    .text.HAL_PWREx_GetSupplyConfig:0000000000000000 $t
     /tmp/cccgiV6Y.s:129    .text.HAL_PWREx_GetSupplyConfig:0000000000000000 HAL_PWREx_GetSupplyConfig
     /tmp/cccgiV6Y.s:146    .text.HAL_PWREx_GetSupplyConfig:000000000000000c $d
     /tmp/cccgiV6Y.s:151    .text.HAL_PWREx_ControlVoltageScaling:0000000000000000 $t
     /tmp/cccgiV6Y.s:157    .text.HAL_PWREx_ControlVoltageScaling:0000000000000000 HAL_PWREx_ControlVoltageScaling
     /tmp/cccgiV6Y.s:349    .text.HAL_PWREx_ControlVoltageScaling:00000000000000cc $d
     /tmp/cccgiV6Y.s:355    .text.HAL_PWREx_GetVoltageRange:0000000000000000 $t
     /tmp/cccgiV6Y.s:361    .text.HAL_PWREx_GetVoltageRange:0000000000000000 HAL_PWREx_GetVoltageRange
     /tmp/cccgiV6Y.s:378    .text.HAL_PWREx_GetVoltageRange:000000000000000c $d
     /tmp/cccgiV6Y.s:383    .text.HAL_PWREx_ControlStopModeVoltageScaling:0000000000000000 $t
     /tmp/cccgiV6Y.s:389    .text.HAL_PWREx_ControlStopModeVoltageScaling:0000000000000000 HAL_PWREx_ControlStopModeVoltageScaling
     /tmp/cccgiV6Y.s:413    .text.HAL_PWREx_ControlStopModeVoltageScaling:0000000000000010 $d
     /tmp/cccgiV6Y.s:418    .text.HAL_PWREx_GetStopModeVoltageRange:0000000000000000 $t
     /tmp/cccgiV6Y.s:424    .text.HAL_PWREx_GetStopModeVoltageRange:0000000000000000 HAL_PWREx_GetStopModeVoltageRange
     /tmp/cccgiV6Y.s:441    .text.HAL_PWREx_GetStopModeVoltageRange:000000000000000c $d
     /tmp/cccgiV6Y.s:446    .text.HAL_PWREx_EnterSTOPMode:0000000000000000 $t
     /tmp/cccgiV6Y.s:452    .text.HAL_PWREx_EnterSTOPMode:0000000000000000 HAL_PWREx_EnterSTOPMode
     /tmp/cccgiV6Y.s:581    .text.HAL_PWREx_EnterSTOPMode:0000000000000060 $d
     /tmp/cccgiV6Y.s:587    .text.HAL_PWREx_ClearPendingEvent:0000000000000000 $t
     /tmp/cccgiV6Y.s:593    .text.HAL_PWREx_ClearPendingEvent:0000000000000000 HAL_PWREx_ClearPendingEvent
     /tmp/cccgiV6Y.s:613    .text.HAL_PWREx_EnterSTANDBYMode:0000000000000000 $t
     /tmp/cccgiV6Y.s:619    .text.HAL_PWREx_EnterSTANDBYMode:0000000000000000 HAL_PWREx_EnterSTANDBYMode
     /tmp/cccgiV6Y.s:671    .text.HAL_PWREx_EnterSTANDBYMode:0000000000000038 $d
     /tmp/cccgiV6Y.s:677    .text.HAL_PWREx_ConfigD3Domain:0000000000000000 $t
     /tmp/cccgiV6Y.s:683    .text.HAL_PWREx_ConfigD3Domain:0000000000000000 HAL_PWREx_ConfigD3Domain
     /tmp/cccgiV6Y.s:703    .text.HAL_PWREx_ConfigD3Domain:0000000000000010 $d
     /tmp/cccgiV6Y.s:708    .text.HAL_PWREx_EnableFlashPowerDown:0000000000000000 $t
     /tmp/cccgiV6Y.s:714    .text.HAL_PWREx_EnableFlashPowerDown:0000000000000000 HAL_PWREx_EnableFlashPowerDown
     /tmp/cccgiV6Y.s:731    .text.HAL_PWREx_EnableFlashPowerDown:000000000000000c $d
     /tmp/cccgiV6Y.s:736    .text.HAL_PWREx_DisableFlashPowerDown:0000000000000000 $t
     /tmp/cccgiV6Y.s:742    .text.HAL_PWREx_DisableFlashPowerDown:0000000000000000 HAL_PWREx_DisableFlashPowerDown
     /tmp/cccgiV6Y.s:759    .text.HAL_PWREx_DisableFlashPowerDown:000000000000000c $d
     /tmp/cccgiV6Y.s:764    .text.HAL_PWREx_EnableWakeUpPin:0000000000000000 $t
     /tmp/cccgiV6Y.s:770    .text.HAL_PWREx_EnableWakeUpPin:0000000000000000 HAL_PWREx_EnableWakeUpPin
     /tmp/cccgiV6Y.s:1036   .text.HAL_PWREx_EnableWakeUpPin:00000000000000a4 $d
     /tmp/cccgiV6Y.s:1043   .text.HAL_PWREx_DisableWakeUpPin:0000000000000000 $t
     /tmp/cccgiV6Y.s:1049   .text.HAL_PWREx_DisableWakeUpPin:0000000000000000 HAL_PWREx_DisableWakeUpPin
     /tmp/cccgiV6Y.s:1068   .text.HAL_PWREx_DisableWakeUpPin:000000000000000c $d
     /tmp/cccgiV6Y.s:1073   .text.HAL_PWREx_GetWakeupFlag:0000000000000000 $t
     /tmp/cccgiV6Y.s:1079   .text.HAL_PWREx_GetWakeupFlag:0000000000000000 HAL_PWREx_GetWakeupFlag
     /tmp/cccgiV6Y.s:1100   .text.HAL_PWREx_GetWakeupFlag:0000000000000008 $d
     /tmp/cccgiV6Y.s:1105   .text.HAL_PWREx_ClearWakeupFlag:0000000000000000 $t
     /tmp/cccgiV6Y.s:1111   .text.HAL_PWREx_ClearWakeupFlag:0000000000000000 HAL_PWREx_ClearWakeupFlag
     /tmp/cccgiV6Y.s:1146   .text.HAL_PWREx_ClearWakeupFlag:0000000000000018 $d
     /tmp/cccgiV6Y.s:1151   .text.HAL_PWREx_WKUP1_Callback:0000000000000000 $t
     /tmp/cccgiV6Y.s:1157   .text.HAL_PWREx_WKUP1_Callback:0000000000000000 HAL_PWREx_WKUP1_Callback
     /tmp/cccgiV6Y.s:1170   .text.HAL_PWREx_WKUP2_Callback:0000000000000000 $t
     /tmp/cccgiV6Y.s:1176   .text.HAL_PWREx_WKUP2_Callback:0000000000000000 HAL_PWREx_WKUP2_Callback
     /tmp/cccgiV6Y.s:1189   .text.HAL_PWREx_WKUP3_Callback:0000000000000000 $t
     /tmp/cccgiV6Y.s:1195   .text.HAL_PWREx_WKUP3_Callback:0000000000000000 HAL_PWREx_WKUP3_Callback
     /tmp/cccgiV6Y.s:1208   .text.HAL_PWREx_WKUP4_Callback:0000000000000000 $t
     /tmp/cccgiV6Y.s:1214   .text.HAL_PWREx_WKUP4_Callback:0000000000000000 HAL_PWREx_WKUP4_Callback
ARM GAS  /tmp/cccgiV6Y.s 			page 98


     /tmp/cccgiV6Y.s:1227   .text.HAL_PWREx_WKUP5_Callback:0000000000000000 $t
     /tmp/cccgiV6Y.s:1233   .text.HAL_PWREx_WKUP5_Callback:0000000000000000 HAL_PWREx_WKUP5_Callback
     /tmp/cccgiV6Y.s:1246   .text.HAL_PWREx_WKUP6_Callback:0000000000000000 $t
     /tmp/cccgiV6Y.s:1252   .text.HAL_PWREx_WKUP6_Callback:0000000000000000 HAL_PWREx_WKUP6_Callback
     /tmp/cccgiV6Y.s:1265   .text.HAL_PWREx_WAKEUP_PIN_IRQHandler:0000000000000000 $t
     /tmp/cccgiV6Y.s:1271   .text.HAL_PWREx_WAKEUP_PIN_IRQHandler:0000000000000000 HAL_PWREx_WAKEUP_PIN_IRQHandler
     /tmp/cccgiV6Y.s:1382   .text.HAL_PWREx_WAKEUP_PIN_IRQHandler:0000000000000094 $d
     /tmp/cccgiV6Y.s:1387   .text.HAL_PWREx_EnableBkUpReg:0000000000000000 $t
     /tmp/cccgiV6Y.s:1393   .text.HAL_PWREx_EnableBkUpReg:0000000000000000 HAL_PWREx_EnableBkUpReg
     /tmp/cccgiV6Y.s:1448   .text.HAL_PWREx_EnableBkUpReg:0000000000000030 $d
     /tmp/cccgiV6Y.s:1453   .text.HAL_PWREx_DisableBkUpReg:0000000000000000 $t
     /tmp/cccgiV6Y.s:1459   .text.HAL_PWREx_DisableBkUpReg:0000000000000000 HAL_PWREx_DisableBkUpReg
     /tmp/cccgiV6Y.s:1514   .text.HAL_PWREx_DisableBkUpReg:0000000000000030 $d
     /tmp/cccgiV6Y.s:1519   .text.HAL_PWREx_EnableUSBReg:0000000000000000 $t
     /tmp/cccgiV6Y.s:1525   .text.HAL_PWREx_EnableUSBReg:0000000000000000 HAL_PWREx_EnableUSBReg
     /tmp/cccgiV6Y.s:1580   .text.HAL_PWREx_EnableUSBReg:0000000000000030 $d
     /tmp/cccgiV6Y.s:1585   .text.HAL_PWREx_DisableUSBReg:0000000000000000 $t
     /tmp/cccgiV6Y.s:1591   .text.HAL_PWREx_DisableUSBReg:0000000000000000 HAL_PWREx_DisableUSBReg
     /tmp/cccgiV6Y.s:1646   .text.HAL_PWREx_DisableUSBReg:0000000000000030 $d
     /tmp/cccgiV6Y.s:1651   .text.HAL_PWREx_EnableUSBVoltageDetector:0000000000000000 $t
     /tmp/cccgiV6Y.s:1657   .text.HAL_PWREx_EnableUSBVoltageDetector:0000000000000000 HAL_PWREx_EnableUSBVoltageDetector
     /tmp/cccgiV6Y.s:1674   .text.HAL_PWREx_EnableUSBVoltageDetector:000000000000000c $d
     /tmp/cccgiV6Y.s:1679   .text.HAL_PWREx_DisableUSBVoltageDetector:0000000000000000 $t
     /tmp/cccgiV6Y.s:1685   .text.HAL_PWREx_DisableUSBVoltageDetector:0000000000000000 HAL_PWREx_DisableUSBVoltageDetector
     /tmp/cccgiV6Y.s:1702   .text.HAL_PWREx_DisableUSBVoltageDetector:000000000000000c $d
     /tmp/cccgiV6Y.s:1707   .text.HAL_PWREx_EnableBatteryCharging:0000000000000000 $t
     /tmp/cccgiV6Y.s:1713   .text.HAL_PWREx_EnableBatteryCharging:0000000000000000 HAL_PWREx_EnableBatteryCharging
     /tmp/cccgiV6Y.s:1737   .text.HAL_PWREx_EnableBatteryCharging:0000000000000018 $d
     /tmp/cccgiV6Y.s:1742   .text.HAL_PWREx_DisableBatteryCharging:0000000000000000 $t
     /tmp/cccgiV6Y.s:1748   .text.HAL_PWREx_DisableBatteryCharging:0000000000000000 HAL_PWREx_DisableBatteryCharging
     /tmp/cccgiV6Y.s:1765   .text.HAL_PWREx_DisableBatteryCharging:000000000000000c $d
     /tmp/cccgiV6Y.s:1770   .text.HAL_PWREx_EnableMonitoring:0000000000000000 $t
     /tmp/cccgiV6Y.s:1776   .text.HAL_PWREx_EnableMonitoring:0000000000000000 HAL_PWREx_EnableMonitoring
     /tmp/cccgiV6Y.s:1793   .text.HAL_PWREx_EnableMonitoring:000000000000000c $d
     /tmp/cccgiV6Y.s:1798   .text.HAL_PWREx_DisableMonitoring:0000000000000000 $t
     /tmp/cccgiV6Y.s:1804   .text.HAL_PWREx_DisableMonitoring:0000000000000000 HAL_PWREx_DisableMonitoring
     /tmp/cccgiV6Y.s:1821   .text.HAL_PWREx_DisableMonitoring:000000000000000c $d
     /tmp/cccgiV6Y.s:1826   .text.HAL_PWREx_GetTemperatureLevel:0000000000000000 $t
     /tmp/cccgiV6Y.s:1832   .text.HAL_PWREx_GetTemperatureLevel:0000000000000000 HAL_PWREx_GetTemperatureLevel
     /tmp/cccgiV6Y.s:1865   .text.HAL_PWREx_GetTemperatureLevel:0000000000000018 $d
     /tmp/cccgiV6Y.s:1870   .text.HAL_PWREx_GetVBATLevel:0000000000000000 $t
     /tmp/cccgiV6Y.s:1876   .text.HAL_PWREx_GetVBATLevel:0000000000000000 HAL_PWREx_GetVBATLevel
     /tmp/cccgiV6Y.s:1909   .text.HAL_PWREx_GetVBATLevel:0000000000000018 $d
     /tmp/cccgiV6Y.s:1914   .text.HAL_PWREx_ConfigAVD:0000000000000000 $t
     /tmp/cccgiV6Y.s:1920   .text.HAL_PWREx_ConfigAVD:0000000000000000 HAL_PWREx_ConfigAVD
     /tmp/cccgiV6Y.s:2007   .text.HAL_PWREx_ConfigAVD:0000000000000094 $d
     /tmp/cccgiV6Y.s:2012   .text.HAL_PWREx_EnableAVD:0000000000000000 $t
     /tmp/cccgiV6Y.s:2018   .text.HAL_PWREx_EnableAVD:0000000000000000 HAL_PWREx_EnableAVD
     /tmp/cccgiV6Y.s:2035   .text.HAL_PWREx_EnableAVD:000000000000000c $d
     /tmp/cccgiV6Y.s:2040   .text.HAL_PWREx_DisableAVD:0000000000000000 $t
     /tmp/cccgiV6Y.s:2046   .text.HAL_PWREx_DisableAVD:0000000000000000 HAL_PWREx_DisableAVD
     /tmp/cccgiV6Y.s:2063   .text.HAL_PWREx_DisableAVD:000000000000000c $d
     /tmp/cccgiV6Y.s:2068   .text.HAL_PWREx_AVDCallback:0000000000000000 $t
     /tmp/cccgiV6Y.s:2074   .text.HAL_PWREx_AVDCallback:0000000000000000 HAL_PWREx_AVDCallback
     /tmp/cccgiV6Y.s:2087   .text.HAL_PWREx_PVD_AVD_IRQHandler:0000000000000000 $t
     /tmp/cccgiV6Y.s:2093   .text.HAL_PWREx_PVD_AVD_IRQHandler:0000000000000000 HAL_PWREx_PVD_AVD_IRQHandler
     /tmp/cccgiV6Y.s:2160   .text.HAL_PWREx_PVD_AVD_IRQHandler:0000000000000060 $d
ARM GAS  /tmp/cccgiV6Y.s 			page 99



UNDEFINED SYMBOLS
HAL_GetTick
HAL_PWR_PVDCallback
